#Область ВходящиеHTTPЗапросы

Функция onScan(Запрос)  
	
	УстановитьПривилегированныйРежим(Истина);  
	
	Попытка                               
	
		ПараметрыВходногоЗапроса = ПолучитьПараметрыHTTPЗапроса(Запрос);
		Если Не ПараметрыВходногоЗапроса.Результат Тогда   
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.Сообщение);			
		КонецЕсли;
		
		ДанныеЗапроса = Новый Структура("Документ, Штрихкод, Результат, Сообщение", 
											Запрос.ПараметрыЗапроса.Получить("document_id"),
											Запрос.ПараметрыЗапроса.Получить("barcode"),  
											Истина, ""); 
											
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.Штрихкод, "Просканировался пустой штрихкод");
		Если Не ДанныеЗапроса.Результат Тогда     
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ДанныеЗапроса.Сообщение);			
		КонецЕсли;
	
		СканированиеШтрихкода = СканироватьШтрихкод(ПараметрыВходногоЗапроса, ДанныеЗапроса); 
		Корзина = ?(СканированиеШтрихкода.Свойство("Корзина"), СканированиеШтрихкода.Корзина, Неопределено);
		
		Если СканированиеШтрихкода.Результат Тогда                                         
			
			Возврат ЗаписатьНТТPОтвет(ПараметрыВходногоЗапроса, СканированиеШтрихкода);    
			
		Иначе                           
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, СканированиеШтрихкода.Сообщение, , Корзина);			
		КонецЕсли;
	
	Исключение
		Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , Корзина);			
	КонецПопытки;	 
	
КонецФункции    

Функция changeQuantity(Запрос)      
	
	УстановитьПривилегированныйРежим(Истина);  
	
	Попытка                	
	
		ПараметрыВходногоЗапроса = ПолучитьПараметрыHTTPЗапроса(Запрос);
		Если Не ПараметрыВходногоЗапроса.Результат Тогда   
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.Сообщение);			
		КонецЕсли;	
		
		ДанныеЗапроса = Новый Структура("Документ, Штрихкод, Количество, Результат, Сообщение", 
											Запрос.ПараметрыЗапроса.Получить("document_id"),
											Запрос.ПараметрыЗапроса.Получить("barcode"),
											Запрос.ПараметрыЗапроса.Получить("quantity"),
											Истина, ""); 
											
		ДанныеЗапроса.Количество = ?(ДанныеЗапроса.Количество <> Неопределено И Число(ДанныеЗапроса.Количество) <= 0, Неопределено, ДанныеЗапроса.Количество);
		
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.Документ,		"Не определена корзина текущей покупки");										
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.Количество,	"Укажите количество изменяемого товара больше нуля");
		Если Не ДанныеЗапроса.Результат Тогда   
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ДанныеЗапроса.Сообщение);			
		КонецЕсли;	
	
		ИзменениеКоличества = ИзменитьКоличество(ПараметрыВходногоЗапроса, ДанныеЗапроса);	   
		Корзина = ?(ИзменениеКоличества.Свойство("Корзина"), ИзменениеКоличества.Корзина, Неопределено);

		Если ИзменениеКоличества.Результат Тогда      

			Возврат ЗаписатьНТТPОтвет(ПараметрыВходногоЗапроса, ИзменениеКоличества);    
			
		Иначе                           
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ИзменениеКоличества.Сообщение, , Корзина);			
		КонецЕсли;  
	
	Исключение
		Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , Корзина);			
	КонецПопытки;	
	
КонецФункции

Функция deleteProduct(Запрос) 
	
	УстановитьПривилегированныйРежим(Истина);  
	
	Попытка                
	
		ПараметрыВходногоЗапроса = ПолучитьПараметрыHTTPЗапроса(Запрос);
		Если Не ПараметрыВходногоЗапроса.Результат Тогда   
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.Сообщение);			
		КонецЕсли;	
		
		ДанныеЗапроса = Новый Структура("Документ, Штрихкод, Результат, Сообщение", 
											Запрос.ПараметрыЗапроса.Получить("document_id"),
											Запрос.ПараметрыЗапроса.Получить("barcode"),
											Истина, ""); 
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.Документ,	"Не определена корзина текущей покупки");										
		Если Не ДанныеЗапроса.Результат Тогда   
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ДанныеЗапроса.Сообщение);			
		КонецЕсли;	
	
		УдалениеТовара = УдалитьТовар(ПараметрыВходногоЗапроса, ДанныеЗапроса);	   
		Корзина = ?(УдалениеТовара.Свойство("Корзина"), УдалениеТовара.Корзина, Неопределено);

		Если УдалениеТовара.Результат Тогда      

			Возврат ЗаписатьНТТPОтвет(ПараметрыВходногоЗапроса, УдалениеТовара);    
			
		Иначе                           
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, УдалениеТовара.Сообщение, , Корзина);			
		КонецЕсли;  
	
	Исключение
		Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , Корзина);			
	КонецПопытки;	
	
КонецФункции

Функция Login(Запрос) 
	
	УстановитьПривилегированныйРежим(Истина); 
	
	Попытка                               
	
		ПараметрыВходногоЗапроса = ПолучитьПараметрыHTTPЗапроса(Запрос);
		Если Не ПараметрыВходногоЗапроса.Результат Тогда   
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.Сообщение);			
		КонецЕсли;	
		
		ДанныеЗапроса = Новый Структура("Документ, НомерТелефона, ОтправитьСмс, Результат, Сообщение", 
											Запрос.ПараметрыЗапроса.Получить("document_id"),
											Запрос.ПараметрыЗапроса.Получить("phone"),  
											Запрос.ПараметрыЗапроса.Получить("send_sms"),        
											Истина, ""); 
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.НомерТелефона, "Не введен номер телефона");
		Если Не ДанныеЗапроса.Результат Тогда     
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ДанныеЗапроса.Сообщение);			
		КонецЕсли;
	
	
		Авторизация = Авторизовать(ПараметрыВходногоЗапроса, ДанныеЗапроса); 
		Корзина = ?(Авторизация.Свойство("Корзина"), Авторизация.Корзина, Неопределено);
		
		Если Авторизация.Результат Тогда      
			
			Авторизация.Вставить("Код", "");
			Если ДанныеЗапроса.ОтправитьСмс = "1" Тогда
				Генератор = Новый ГенераторСлучайныхЧисел;
				Авторизация.Код = Генератор.СлучайноеЧисло(1000, 9999);  
				ОтправитьSMS(ДанныеЗапроса.НомерТелефона, Авторизация.Код);	
			КонецЕсли;
			
			Возврат ЗаписатьНТТPОтвет(ПараметрыВходногоЗапроса, Авторизация);    
			
		Иначе                           
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, Авторизация.Сообщение, , Корзина);			
		КонецЕсли;
	
	Исключение
		Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , Корзина);			
	КонецПопытки;	
	
КонецФункции 

Функция Register(Запрос)  
	
	УстановитьПривилегированныйРежим(Истина);   
	
	Попытка                               
	
		ПараметрыВходногоЗапроса = ПолучитьПараметрыHTTPЗапроса(Запрос);
		Если Не ПараметрыВходногоЗапроса.Результат Тогда   
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.Сообщение);			
		КонецЕсли;	
		
		ДанныеЗапроса = Новый Структура("Документ, НомерТелефона, Имя, Отчество, Фамилия, ПроверочныйКодСМС, Результат, Сообщение", 
											Запрос.ПараметрыЗапроса.Получить("document_id"),
											Запрос.ПараметрыЗапроса.Получить("phone"),        
											Запрос.ПараметрыЗапроса.Получить("first_name"),     
											Запрос.ПараметрыЗапроса.Получить("second_name"),    
											Запрос.ПараметрыЗапроса.Получить("last_name"),
											Запрос.ПараметрыЗапроса.Получить("sms_verify_code"),        
											Истина, ""); 
											
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.НомерТелефона, "Не заполнен номер телефона");
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.Имя, "Не заполнено имя");
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.Фамилия, "Не заполнена фамилия"); 
		
		Если Не ДанныеЗапроса.Результат Тогда     
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ДанныеЗапроса.Сообщение);			
		КонецЕсли;
	
		Регистрация = Зарегистрировать(ПараметрыВходногоЗапроса, ДанныеЗапроса); 
		Корзина = ?(Регистрация.Свойство("Корзина"), Регистрация.Корзина, Неопределено);
		
		Если Регистрация.Результат Тогда      
			
			Регистрация.Вставить("НужнаВерификация", Истина);
			Регистрация.Вставить("Код", "");
			
			Если ДанныеЗапроса.ПроверочныйКодСМС = Неопределено Тогда  
				Генератор = Новый ГенераторСлучайныхЧисел;
				Регистрация.Код = Генератор.СлучайноеЧисло(1000, 9999);;   
				ОтправитьSMS(ДанныеЗапроса.НомерТелефона, Регистрация.Код);	
			Иначе
				Регистрация.НужнаВерификация = Ложь;		
			КонецЕсли;
			
			Возврат ЗаписатьНТТPОтвет(ПараметрыВходногоЗапроса, Регистрация);    
			
		Иначе                           
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, Регистрация.Сообщение, , Корзина);			
		КонецЕсли;
	
	Исключение
		Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , Корзина);			
	КонецПопытки;	
	
КонецФункции   

Функция openBatch(Запрос) 
	
	УстановитьПривилегированныйРежим(Истина);     
	
	Попытка
	
		ПараметрыВходногоЗапроса = ПолучитьПараметрыHTTPЗапроса(Запрос);
		
		Если Не ПараметрыВходногоЗапроса.Результат Тогда   
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.Сообщение);			
		КонецЕсли;
		
		ОткрытиеСмены = ОткрытьСмену(ПараметрыВходногоЗапроса);  
		Корзина = ?(ОткрытиеСмены.Свойство("Корзина"), ОткрытиеСмены.Корзина, Неопределено);
	
		Если ОткрытиеСмены.Результат Тогда      

			Возврат ЗаписатьНТТPОтвет(ПараметрыВходногоЗапроса, ОткрытиеСмены);    
			
		Иначе                           
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ОткрытиеСмены.Сообщение, , Корзина);			
		КонецЕсли;
	
	Исключение
		Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , Корзина);			
	КонецПопытки;	
	
КонецФункции  

Функция closeBatch(Запрос)

	УстановитьПривилегированныйРежим(Истина);     
	
	Попытка
	
		ПараметрыВходногоЗапроса = ПолучитьПараметрыHTTPЗапроса(Запрос);
		
		Если Не ПараметрыВходногоЗапроса.Результат Тогда   
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.Сообщение);			
		КонецЕсли;
		
		ЗакрытиеСмены = ЗакрытьСмену(ПараметрыВходногоЗапроса);   
		Корзина = ?(ЗакрытиеСмены.Свойство("Корзина"), ЗакрытиеСмены.Корзина, Неопределено);
	
		Если ЗакрытиеСмены.Результат Тогда      

			Возврат ЗаписатьНТТPОтвет(ПараметрыВходногоЗапроса, ЗакрытиеСмены);    
			
		Иначе                           
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ЗакрытиеСмены.Сообщение, , Корзина);			
		КонецЕсли;
	
	Исключение
		Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , Корзина);			
	КонецПопытки;	
	
КонецФункции

Функция writeDocument(Запрос)

	УстановитьПривилегированныйРежим(Истина);         
	
	Попытка
	
		ПараметрыВходногоЗапроса = ПолучитьПараметрыHTTPЗапроса(Запрос);
		
		Если Не ПараметрыВходногоЗапроса.Результат Тогда   
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.Сообщение);			
		КонецЕсли;      
		
		РасчетСкидокВЧеке = РасчитатьСкидкиВЧеке(ПараметрыВходногоЗапроса); 
		Корзина = ?(РасчетСкидокВЧеке.Свойство("Корзина"), РасчетСкидокВЧеке.Корзина, Неопределено);
	
		Если РасчетСкидокВЧеке.Результат Тогда      

			Возврат ЗаписатьНТТPОтвет(ПараметрыВходногоЗапроса, РасчетСкидокВЧеке);    
			
		Иначе                           
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, РасчетСкидокВЧеке.Сообщение, , Корзина);			
		КонецЕсли;
	
	Исключение
		Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , Корзина);			
	КонецПопытки;	

КонецФункции

Функция AccessDocument(Запрос)   
	
	УстановитьПривилегированныйРежим(Истина);         
	
	Попытка
	
		ПараметрыВходногоЗапроса = ПолучитьПараметрыHTTPЗапроса(Запрос);
		
		Если Не ПараметрыВходногоЗапроса.Результат Тогда   
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.Сообщение);			
		КонецЕсли;     
		
		ДанныеЗапроса = Новый Структура("Документ, ЭквайринговыйТерминал, НомерПлатежнойКарты, СсылочныйНомер, НомерЧекаЭТ, КодАвторизации, ИдентификаторТранзакции, 
										|СуммаОплаты, КОплатеБаллами, ПечататьБумажныйЧек, ПочтаКлиента, 
										|Результат, Сообщение", 
											Запрос.ПараметрыЗапроса.Получить("document_id"),
											Запрос.ПараметрыЗапроса.Получить("terminal_id"),
											Запрос.ПараметрыЗапроса.Получить("card_number"),
											Запрос.ПараметрыЗапроса.Получить("link_number"),
											Запрос.ПараметрыЗапроса.Получить("check_number"),
											Запрос.ПараметрыЗапроса.Получить("auth_code"),     
											Запрос.ПараметрыЗапроса.Получить("transaction_id"),
											Запрос.ПараметрыЗапроса.Получить("terminal_sum"),
											Запрос.ПараметрыЗапроса.Получить("count"),
											Запрос.ПараметрыЗапроса.Получить("print_check"),
											Запрос.ПараметрыЗапроса.Получить("email"),
											Истина, ""); 
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.Документ, 				"Не указан документ document_id");  
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.ЭквайринговыйТерминал, 	"Не указан эквайринговый терминал terminal_id");
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.НомерПлатежнойКарты, 		"Не указан номер платежной карты card_number");
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.СсылочныйНомер, 			"Не указан ссылочный номер link_number");
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.НомерЧекаЭТ, 				"Не указан номер чека ЭТ check_number");
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.КодАвторизации, 			"Не указан код авторизации auth_code");
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.ИдентификаторТранзакции, 	"Не указан идентификатор транзакции transaction_id");
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.СуммаОплаты, 				"Не указана сумма оплаты terminal_sum");
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.ПечататьБумажныйЧек, 		"Не указан параметр печати бумажного чека print_check");   
		
		Если Не ДанныеЗапроса.Результат Тогда     
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ДанныеЗапроса.Сообщение);			
		КонецЕсли;     
		
		РасчетОплатыВЧеке = РасчитатьОплатуВЧеке(ПараметрыВходногоЗапроса, ДанныеЗапроса); 
		Чек = ?(РасчетОплатыВЧеке.Свойство("Чек"), РасчетОплатыВЧеке.Чек, Неопределено);
	
		Если РасчетОплатыВЧеке.Результат Тогда      

			Возврат ЗаписатьНТТPОтвет(ПараметрыВходногоЗапроса, РасчетОплатыВЧеке);    
			
		Иначе                           
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, РасчетОплатыВЧеке.Сообщение, , Чек);			
		КонецЕсли;
	
	Исключение
		Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , Чек);			
	КонецПопытки;	

КонецФункции

Функция getPartnerGroups(Запрос)  
	
	УстановитьПривилегированныйРежим(Истина);      
	
	Попытка
	
		ПараметрыВходногоЗапроса = ПолучитьПараметрыHTTPЗапроса(Запрос);
		
		Если Не ПараметрыВходногоЗапроса.Результат Тогда   
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.Сообщение);			
		КонецЕсли;
		
		ПолучениеГруппПартнеров = ПолучитьГруппыПартнеров(ПараметрыВходногоЗапроса); 
	
		Если ПолучениеГруппПартнеров.Результат Тогда      

			Возврат ЗаписатьНТТPОтвет(ПараметрыВходногоЗапроса, ПолучениеГруппПартнеров);    
			
		Иначе                           
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ПолучениеГруппПартнеров.Сообщение, , Неопределено);			
		КонецЕсли;
	
	Исключение
		Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , Неопределено);			
	КонецПопытки;	
КонецФункции

Функция deviceStatus(Запрос)       
	
	УстановитьПривилегированныйРежим(Истина); 
	
	Попытка
	
		ПараметрыВходногоЗапроса = ПолучитьПараметрыHTTPЗапроса(Запрос);
		
		Если Не ПараметрыВходногоЗапроса.Результат Тогда   
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.Сообщение);			
		КонецЕсли;
		
		ПолучениеСтатусаККТ = ДопМодульСервер.ПолучитьСтатусККТ(ПараметрыВходногоЗапроса); 
	
		Если ПолучениеСтатусаККТ.Результат Тогда      

			Возврат ЗаписатьНТТPОтвет(ПараметрыВходногоЗапроса, ПолучениеСтатусаККТ);    
			
		Иначе                           
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ПолучениеСтатусаККТ.Сообщение, , Неопределено);			
		КонецЕсли;
	
	Исключение
		Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , Неопределено);			
	КонецПопытки;

КонецФункции      

Функция printPass(Запрос)       
	
	УстановитьПривилегированныйРежим(Истина);  
	
	Попытка
		
		ПараметрыВходногоЗапроса = ПолучитьПараметрыHTTPЗапроса(Запрос);
		
		Если Не ПараметрыВходногоЗапроса.Результат Тогда   
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.Сообщение);			
		КонецЕсли;       
		
		ДанныеЗапроса = Новый Структура("Документ, Результат", Запрос.ПараметрыЗапроса.Получить("document_id"), Истина); 
		ПроверитьНаличие(ДанныеЗапроса, ДанныеЗапроса.Документ, "Не указан документ для печати пропуска");
		Если Не ДанныеЗапроса.Результат Тогда     
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ДанныеЗапроса.Сообщение);			
		КонецЕсли;
		
		ПечатьПропуска = НапечататьПропуск(ПараметрыВходногоЗапроса, ДанныеЗапроса); 
		Корзина = ?(ПечатьПропуска.Свойство("Корзина"), ПечатьПропуска.Корзина, Неопределено);
	
		Если ПечатьПропуска.Результат Тогда      

			Возврат ЗаписатьНТТPОтвет(ПараметрыВходногоЗапроса, ПечатьПропуска);    
			
		Иначе                           
			Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ПечатьПропуска.Сообщение, , Корзина);			
		КонецЕсли;
	
	Исключение
		Возврат ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , Корзина);			
	КонецПопытки;
КонецФункции

#КонецОбласти   
                                                           
#Область ДействияHTTPЗапросы

Функция УстановитьHTTPЗаголовки()   
	
	 Заголовки = Новый Соответствие;
	 Заголовки.Вставить("Content-Type", "application/json");
	 Заголовки.Вставить("charset", "utf-8");
	 Возврат Заголовки 
	 
 КонецФункции 
 
Функция ПолучитьHTTPЗапрос(БазовыйURL, ОтносительныйURL, ПараметрыЗапроса)
	
	Запрос = БазовыйURL + ОтносительныйURL;
	
	СписокПараметров = "";
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Если СписокПараметров = "" Тогда 
			СписокПараметров = "?"
		Иначе                   
			СписокПараметров = СписокПараметров + "&";
		КонецЕсли;
		
		СписокПараметров = СписокПараметров + ПараметрЗапроса.Ключ + "=" + СтрЗаменить(ПараметрЗапроса.Значение, " ", "%20");
	КонецЦикла;

	Запрос = Запрос + СписокПараметров;
	Возврат Запрос   
	
КонецФункции 

Функция ПолучитьПараметрыHTTPЗапроса(Запрос)           
	
	ПараметрыВходногоЗапроса = ПолучитьНастройкиРМК();         
	ПараметрыВходногоЗапроса.Вставить("Результат", Истина);
	ПараметрыВходногоЗапроса.Вставить("Сообщение", "");  
	
	ИмяПользователя = "У пользователя " + ПараметрыВходногоЗапроса.ПользовательИБ.Имя + " ";
	ПроверитьНаличие(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.РабочееМестоСамообслуживания,	ИмяПользователя	+ "отсутствует настройка рабочего места");
	ПроверитьНаличие(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.КассаСамообслуживания, 			ИмяПользователя + "отсутствует касса в настройках рабочего места");
	ПроверитьНаличие(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.КассаККМ, 						ИмяПользователя + "отсутствует касса ККМ в настройках рабочего места");
	ПроверитьНаличие(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.Организация, 					ИмяПользователя + "отсутствует организация в настройках кассы рабочего места");
	ПроверитьНаличие(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.Подразделение, 					ИмяПользователя + "отсутствует подразделение в настройках кассы рабочего места");
	ПроверитьНаличие(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.Склад, 							ИмяПользователя + "отсутствует склад в настройках кассы ККМ для рабочего места");
	
	ПараметрыВходногоЗапроса.Вставить("ТипЗапроса", Сред(Запрос.ОтносительныйURL, 2));
	ПараметрыВходногоЗапроса.Вставить("Запрос", ПолучитьHTTPЗапрос(Запрос.БазовыйURL, Запрос.ОтносительныйURL, Запрос.ПараметрыЗапроса)); 
	ПараметрыВходногоЗапроса.Вставить("ДатаЗапроса",Формат(ТекущаяДата(), "ДФ=дд.ММ.гггг ЧЧ:мм:сс"));    
	
	Если Не ПараметрыВходногоЗапроса.Результат Тогда 
		Возврат ПараметрыВходногоЗапроса;
	КонецЕсли;

	Возврат ПараметрыВходногоЗапроса;  
	
КонецФункции     

Функция ЗаписатьНТТPОтвет(ПараметрыВходногоЗапроса, РезультатЗапроса)   
	
	Ответ = Новый HTTPСервисОтвет(200);   
	Ответ.Заголовки = УстановитьHTTPЗаголовки();
	
	ЗаписьJSON = Новый ЗаписьJSON;   
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);

	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("error");
		ЗаписьJSON.ЗаписатьЗначение(Ложь);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("response");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();   
		
		ЗаписатьHTTPСканированиеШтрихкода(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса);
		ЗаписатьHTTPАвторизациюРегистрацию(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса);
		ЗаписатьHTTPИзменениеУдалениеТовара(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса);
		ЗаписатьHTTPРасчетСкидокВчеке(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса);
		ЗаписатьHTTPРОплатуВЧеке(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса);
		ЗаписатьHTTPИзменениеСмены(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса);
		ЗаписатьHTTPСписокГруппПартнеров(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса);
		ЗаписатьHTTPСтатусККТ(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса);
		ЗаписатьHTTPПечатьПропуска(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса);
			
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.ЗаписатьКонецОбъекта();			
		 
	СтрокаJSON = ЗаписьJSON.Закрыть();   
	
	Корзина = ?(РезультатЗапроса.Свойство("Корзина"), РезультатЗапроса.Корзина,  Неопределено);
	РазблокироватьКорзину(Корзина);                                                            
	
	Чек = ?(РезультатЗапроса.Свойство("Чек"), РезультатЗапроса.Чек,  Неопределено);

	ЗаписатьЛог(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.ДатаЗапроса + Символы.ПС + ПараметрыВходногоЗапроса.Запрос + Символы.ПС + Формат(ТекущаяДата(), "ДФ=дд.ММ.гггг ЧЧ:мм:сс") + Символы.ПС + СтрокаJSON + Символы.ПС, Корзина, Чек);
	
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8);
	Возврат Ответ; 
	
КонецФункции		

Функция ЗаписатьHTTPОшибку(ПараметрыВходногоЗапроса, ТекстОшибки = "", Статус = 400, Корзина = Неопределено)
	 
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки = УстановитьHTTPЗаголовки();		
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("error");
	ЗаписьJSON.ЗаписатьЗначение(Истина);	
	
	ЗаписьJSON.ЗаписатьИмяСвойства("response");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("status");
		ЗаписьJSON.ЗаписатьЗначение(Статус);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("description");
		ЗаписьJSON.ЗаписатьЗначение(ТекстОшибки);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();  
	
	СтрокаJSON = ЗаписьJSON.Закрыть();    
	
	ЗаписатьЛог(ПараметрыВходногоЗапроса, ПараметрыВходногоЗапроса.ДатаЗапроса + Символы.ПС + ПараметрыВходногоЗапроса.Запрос + Символы.ПС + Формат(ТекущаяДата(), "ДФ=дд.ММ.гггг ЧЧ:мм:сс") + Символы.ПС + СтрокаJSON + Символы.ПС, Корзина);

	РазблокироватьКорзину(Корзина);

	Ответ.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8);	
	Возврат Ответ; 
	
КонецФункции

Процедура ЗаписатьHTTPСканированиеШтрихкода(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса)
	
	Если ПараметрыВходногоЗапроса.ТипЗапроса <> "onScan" Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаписатьHTTPСканированиеШтрихкодаСотрудника(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса);
	ЗаписатьHTTPСканированиеШтрихкодаТовара(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса);
	ЗаписатьHTTPСканированиеШтрихкодаКарты(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса);
	ЗаписатьHTTPСканированиеШтрихкодаДокумента(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса);
	
КонецПроцедуры	
	
Процедура ЗаписатьHTTPСканированиеШтрихкодаСотрудника(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса)  
	
	Если РезультатЗапроса.Свойство("ТипШтрихкода") И РезультатЗапроса.ТипШтрихкода = "Сотрудник" Тогда     
		
		ЗаписьJSON.ЗаписатьИмяСвойства("type");
		ЗаписьJSON.ЗаписатьЗначение("scanEmployee");
		
		ЗаписьJSON.ЗаписатьИмяСвойства("data");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
			ЗаписьJSON.ЗаписатьИмяСвойства("employee");
			ЗаписьJSON.ЗаписатьЗначение(?(РезультатЗапроса.Свойство("Штрихкод"), РезультатЗапроса.Штрихкод, ""));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("employee_name");
			ЗаписьJSON.ЗаписатьЗначение(?(РезультатЗапроса.Свойство("Сотрудник"), Строка(РезультатЗапроса.Сотрудник), ""));

			ЗаписьJSON.ЗаписатьИмяСвойства("access");     
			ЗаписьJSON.ЗаписатьЗначение(?(РезультатЗапроса.Свойство("ПравоАдминистрирования") И РезультатЗапроса.ПравоАдминистрирования, РезультатЗапроса.ПравоАдминистрирования, Ложь)); 
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();

	КонецЕсли;		
	
КонецПроцедуры   

Процедура ЗаписатьHTTPСканированиеШтрихкодаКарты(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса) 
	
	Если РезультатЗапроса.Свойство("ТипШтрихкода") И РезультатЗапроса.ТипШтрихкода = "Карта" Тогда    
		
		ЗаписьJSON.ЗаписатьИмяСвойства("type");
		ЗаписьJSON.ЗаписатьЗначение("scanLoyalty");			
	
		ЗаписьJSON.ЗаписатьИмяСвойства("data");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();     
		
		Если РезультатЗапроса.Свойство("Корзина") Тогда
			
			ЗаписатьHTTPПокупателя(ЗаписьJSON, РезультатЗапроса.Корзина);
			
			Если РезультатЗапроса.Свойство("СтрокаТовара") Тогда
				ЗаписатьHTTPКорзину(ЗаписьJSON, РезультатЗапроса.Корзина, РезультатЗапроса.СтрокаТовара);
			КонецЕсли;
		КонецЕсли; 
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаписатьHTTPСканированиеШтрихкодаТовара(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса) 
	
	Если РезультатЗапроса.Свойство("ТипШтрихкода") И РезультатЗапроса.ТипШтрихкода = "Товар" Тогда    
		
		ЗаписьJSON.ЗаписатьИмяСвойства("type");
		ЗаписьJSON.ЗаписатьЗначение("scanProduct");			
	
		ЗаписьJSON.ЗаписатьИмяСвойства("data");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();      
		
		Если РезультатЗапроса.Свойство("Корзина") И РезультатЗапроса.Свойство("СтрокаТовара") Тогда
			ЗаписатьHTTPКорзину(ЗаписьJSON, РезультатЗапроса.Корзина, РезультатЗапроса.СтрокаТовара);
		КонецЕсли; 
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
	КонецЕсли;	
	
КонецПроцедуры      

Процедура ЗаписатьHTTPСканированиеШтрихкодаДокумента(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса) 
	
	Если РезультатЗапроса.Свойство("ТипШтрихкода") И РезультатЗапроса.ТипШтрихкода = "Документ" Тогда    
		
		ЗаписьJSON.ЗаписатьИмяСвойства("type");
		ЗаписьJSON.ЗаписатьЗначение("scanDocument");			
	
		ЗаписьJSON.ЗаписатьИмяСвойства("data");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();      
		
		Если РезультатЗапроса.Свойство("Корзина") Тогда 
			ЗаписатьHTTPПокупателя(ЗаписьJSON, РезультатЗапроса.Корзина);   
			ЗаписатьHTTPКорзину(ЗаписьJSON, РезультатЗапроса.Корзина);
		КонецЕсли; 
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
	КонецЕсли;	
	
КонецПроцедуры 

Процедура ЗаписатьHTTPИзменениеУдалениеТовара(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса)
	
	Если Не (ПараметрыВходногоЗапроса.ТипЗапроса = "changeQuantity" Или ПараметрыВходногоЗапроса.ТипЗапроса = "deleteProduct") Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаписатьHTTPРезультат(ЗаписьJSON, РезультатЗапроса.Результат);
	ЗаписатьHTTPКорзину(ЗаписьJSON, РезультатЗапроса.Корзина);     
	
КонецПроцедуры 	

Процедура ЗаписатьHTTPАвторизациюРегистрацию(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса)
	
	Если Не (ПараметрыВходногоЗапроса.ТипЗапроса = "Login" Или ПараметрыВходногоЗапроса.ТипЗапроса = "Register") Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаписатьHTTPПокупателя(ЗаписьJSON, РезультатЗапроса.Корзина, Истина);                                      
	
	Если ПараметрыВходногоЗапроса.ТипЗапроса = "Register" И РезультатЗапроса.Свойство("НужнаВерификация") Тогда
		ЗаписатьHTTPНеобходимостьВерификации(ЗаписьJSON, РезультатЗапроса.НужнаВерификация);
	КонецЕсли;
		
	ЗаписатьHTTPКодСмс(ЗаписьJSON, РезультатЗапроса.Код);
	ЗаписатьHTTPКорзину(ЗаписьJSON, РезультатЗапроса.Корзина);     
	
КонецПроцедуры    

Процедура ЗаписатьHTTPРасчетСкидокВчеке(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса);

	Если ПараметрыВходногоЗапроса.ТипЗапроса <> "writeDocument" Тогда 
		Возврат;
	КонецЕсли;    
	
	ЗаписатьHTTPКорзину(ЗаписьJSON, РезультатЗапроса.Чек);
	
КонецПроцедуры	

Процедура ЗаписатьHTTPРОплатуВЧеке(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса);

	Если ПараметрыВходногоЗапроса.ТипЗапроса <> "AccessDocument" Тогда 
		Возврат;
	КонецЕсли;    
	
	ЗаписатьHTTPПробитыйЧек(ЗаписьJSON, РезультатЗапроса.Чек);
	
КонецПроцедуры
	
Процедура ЗаписатьHTTPИзменениеСмены(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса)
	
	Если Не (ПараметрыВходногоЗапроса.ТипЗапроса = "openBatch" Или ПараметрыВходногоЗапроса.ТипЗапроса = "closeBatch") Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаписатьHTTPРезультат(ЗаписьJSON, РезультатЗапроса.Результат);
	
КонецПроцедуры    

Процедура ЗаписатьHTTPСписокГруппПартнеров(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса)
	
	Если Не ПараметрыВходногоЗапроса.ТипЗапроса = "getPartnerGroups" Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаписатьHTTPГруппыПартнеров(ЗаписьJSON, РезультатЗапроса);
	
КонецПроцедуры 

Процедура ЗаписатьHTTPСтатусККТ(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса)
	
	Если Не ПараметрыВходногоЗапроса.ТипЗапроса = "deviceStatus" Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаписатьHTTPТекущееСостояниеККТ(ЗаписьJSON, РезультатЗапроса);

КонецПроцедуры 

Процедура ЗаписатьHTTPПечатьПропуска(ПараметрыВходногоЗапроса, ЗаписьJSON, РезультатЗапроса)
	
	Если Не ПараметрыВходногоЗапроса.ТипЗапроса = "printPass" Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаписатьHTTPРезультат(ЗаписьJSON, РезультатЗапроса.Результат);
	
КонецПроцедуры

Процедура ЗаписатьHTTPПокупателя(ЗаписьJSON, Корзина, ЗаписатьДокумент = Ложь)
	
	Если ЗаписатьДокумент Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("document_id");	    
		ЗаписьJSON.ЗаписатьЗначение(Строка(Корзина.Ссылка.УникальныйИдентификатор()));
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьИмяСвойства("user_id");
	ЗаписьJSON.ЗаписатьЗначение(Строка(Корзина.Партнер.УникальныйИдентификатор()));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("user_name");
	ЗаписьJSON.ЗаписатьЗначение(Строка(Корзина.Партнер));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("partner_group");
	ЗаписьJSON.ЗаписатьЗначение(?(ЗначениеЗаполнено(Корзина.ГруппаПартнера), Строка(Корзина.ГруппаПартнера.УникальныйИдентификатор()), "")); 	
	
	ЗаписьJSON.ЗаписатьИмяСвойства("phone");
	ЗаписьJSON.ЗаписатьЗначение(Корзина.НомерТелефона); 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("email");
	ЗаписьJSON.ЗаписатьЗначение(Корзина.АдресЭП);  
	
	ЗаписьJSON.ЗаписатьИмяСвойства("balance");   
	ЗаписьJSON.ЗаписатьЗначение(Корзина.БаллыПартнера);   
	
	ЗаписьJSON.ЗаписатьИмяСвойства("loyalty_active"); 
	ЗаписьJSON.ЗаписатьЗначение(Корзина.УчастиеВБонуснойПрограмме);  
	
	ЗаписьJSON.ЗаписатьИмяСвойства("card_number");
	ЗаписьJSON.ЗаписатьЗначение(Корзина.НомерКарты); 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("need_verify");
	ЗаписьJSON.ЗаписатьЗначение(Истина);
		
КонецПроцедуры      

Процедура ЗаписатьHTTPКодСмс(ЗаписьJSON, Код)
	
	ЗаписьJSON.ЗаписатьИмяСвойства("sms_code");
	ЗаписьJSON.ЗаписатьЗначение(Код);
	
КонецПроцедуры	

Процедура ЗаписатьHTTPНеобходимостьВерификации(ЗаписьJSON, НужнаВерификация)
	
	ЗаписьJSON.ЗаписатьИмяСвойства("need_verify");
	ЗаписьJSON.ЗаписатьЗначение(НужнаВерификация);
	
КонецПроцедуры	

Процедура ЗаписатьHTTPКорзину(ЗаписьJSON, Корзина, СтрокаТовара = Неопределено)
	
	ЗаписьJSON.ЗаписатьИмяСвойства("document");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();                                             
	
		ЗаписьJSON.ЗаписатьИмяСвойства("id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Корзина.Ссылка.УникальныйИдентификатор()));         
		
		ТипДокумента = ?(ЗначениеЗаполнено(Корзина.ЧекККМ), "receipt", 
			?(ЗначениеЗаполнено(Корзина.Реализация), "realisation", 
			?(ЗначениеЗаполнено(Корзина.ЗаказКлиента), "order", "default") ) );  
			
		ЗаписьJSON.ЗаписатьИмяСвойства("type");
		ЗаписьJSON.ЗаписатьЗначение(ТипДокумента);     
		
		НаименованиеДокумента = ?(ЗначениеЗаполнено(Корзина.ЧекККМ), Строка(Корзина.ЧекККМ), 
			?(ЗначениеЗаполнено(Корзина.Реализация), Строка(Корзина.Реализация), 
			?(ЗначениеЗаполнено(Корзина.ЗаказКлиента), Строка(Корзина.ЗаказКлиента), "") ) );  

		ЗаписьJSON.ЗаписатьИмяСвойства("name");
		ЗаписьJSON.ЗаписатьЗначение(НаименованиеДокумента);     
		
		ЗаписьJSON.ЗаписатьИмяСвойства("delivery");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Корзина.ЗаказНаДоставку));     
		
		ЗаписьJSON.ЗаписатьИмяСвойства("created_by_manager");	
		ЗаписьJSON.ЗаписатьЗначение(Корзина.ТипПродажи <> 0);
		
		УжеОплачено = Корзина.ТипПродажи % 10 = 1;   
		ЗаписьJSON.ЗаписатьИмяСвойства("already_paid");
		ЗаписьJSON.ЗаписатьЗначение(УжеОплачено);	 
		
		ЗаписьJSON.ЗаписатьИмяСвойства("has_qr");
		ЗаписьJSON.ЗаписатьЗначение(?((Корзина.ТипПродажи = 11 Или Корзина.ТипПродажи = 21) И Не ЗначениеЗаполнено(Корзина.ЗаказНаДоставку), Истина, Ложь));       
		
		ЗаписьJSON.ЗаписатьИмяСвойства("total_price");
		ЗаписьJSON.ЗаписатьЗначение(Корзина.СуммаДокумента + Корзина.КОплатеБаллами);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("bonuses_pay");
		ЗаписьJSON.ЗаписатьЗначение(Корзина.КОплатеБаллами);	
	
		ЗаписьJSON.ЗаписатьИмяСвойства("bonuses_available");
		ЗаписьJSON.ЗаписатьЗначение(?(Не УжеОплачено, Корзина.ДоступныеБаллы, 0));	
		
	ЗаписьJSON.ЗаписатьКонецОбъекта();	
	
	Если СтрокаТовара <> Неопределено Тогда
		ЗаписатьHTTPТоварКорзины(ЗаписьJSON, СтрокаТовара)
		
	Иначе                  
		ЗаписьJSON.ЗаписатьИмяСвойства("products");
		ЗаписьJSON.ЗаписатьНачалоМассива();	
		
		Для Каждого СтрокаКорзины Из Корзина.Товары Цикл     
			ЗаписьJSON.ЗаписатьНачалоОбъекта();			
			ЗаписатьHTTPТоварКорзины(ЗаписьJSON, СтрокаКорзины);
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла;	
		
		ЗаписьJSON.ЗаписатьКонецМассива();
	КонецЕсли;
	
КонецПроцедуры	 
	
Процедура ЗаписатьHTTPТоварКорзины(ЗаписьJSON, СтрокаТовара, СтрокаИнформации = Неопределено)
	
	ЗаписьJSON.ЗаписатьИмяСвойства("id");
	ЗаписьJSON.ЗаписатьЗначение(Строка(СтрокаТовара.Номенклатура.УникальныйИдентификатор()));	

	ЗаписьJSON.ЗаписатьИмяСвойства("name");
	ЗаписьJSON.ЗаписатьЗначение(Строка(СтрокаТовара.Номенклатура));					
	
	ЗаписьJSON.ЗаписатьИмяСвойства("barcode");
	ЗаписьJSON.ЗаписатьЗначение(СтрокаТовара.Штрихкод);					
	
	ЗаписьJSON.ЗаписатьИмяСвойства("articul");
	ЗаписьJSON.ЗаписатьЗначение(?(СтрокаИнформации = Неопределено, СтрокаТовара.Код, СтрокаИнформации.Код));			
	
	ЗаписьJSON.ЗаписатьИмяСвойства("weight");
	ЗаписьJSON.ЗаписатьЗначение(?(СтрокаИнформации = Неопределено, СтрокаТовара.Вес, СтрокаИнформации.Вес));			
	
	ЗаписьJSON.ЗаписатьИмяСвойства("weight_unit");              
	ЗаписьJSON.ЗаписатьЗначение(?(СтрокаИнформации = Неопределено, Строка(СтрокаТовара.ЕдиницаИзмеренияВеса), Строка(СтрокаИнформации.ЕдиницаИзмеренияВеса)));			

	ЗаписьJSON.ЗаписатьИмяСвойства("count");
	ЗаписьJSON.ЗаписатьЗначение(СтрокаТовара.Количество);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("prices");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
		ЗаписьJSON.ЗаписатьИмяСвойства("default");
		ЗаписьJSON.ЗаписатьЗначение(?(СтрокаИнформации = Неопределено, СтрокаТовара.ЦенаБезКарты, СтрокаИнформации.ЦенаБезКарты));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("card");    
		ЗаписьJSON.ЗаписатьЗначение(?(СтрокаИнформации = Неопределено, СтрокаТовара.ЦенаПоКарте, СтрокаИнформации.ЦенаПоКарте));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("sale");
		ЗаписьJSON.ЗаписатьЗначение(СтрокаТовара.Цена);		
		
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

Процедура ЗаписатьHTTPПробитыйЧек(ЗаписьJSON, Чек)
	
	ЗаписьJSON.ЗаписатьИмяСвойства("document");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();                                             
	
		ЗаписьJSON.ЗаписатьИмяСвойства("id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Чек.Ссылка.УникальныйИдентификатор()));      
		
		ТипДокумента = ?(ЗначениеЗаполнено(Чек.ЧекККМ), "receipt", 
			?(ЗначениеЗаполнено(Чек.Реализация), "realisation", 
			?(ЗначениеЗаполнено(Чек.ЗаказКлиента), "order", "default") ) );  
			
		ЗаписьJSON.ЗаписатьИмяСвойства("type");
		ЗаписьJSON.ЗаписатьЗначение(ТипДокумента);     
		
		ЗаписьJSON.ЗаписатьИмяСвойства("has_qr");
		ЗаписьJSON.ЗаписатьЗначение(?((Чек.ТипПродажи = 11 Или Чек.ТипПродажи = 21) И Не ЗначениеЗаполнено(Чек.ЗаказНаДоставку), Истина, Ложь));       
		
		ЗаписьJSON.ЗаписатьИмяСвойства("total_price");
		ЗаписьJSON.ЗаписатьЗначение(Чек.СуммаДокумента);	 
		
		ЗаписьJSON.ЗаписатьИмяСвойства("bonuses_available");
		ЗаписьJSON.ЗаписатьЗначение(Чек.СуммаОплатыБаллами);	
		
	ЗаписьJSON.ЗаписатьКонецОбъекта();	      
	
	ЗаписьJSON.ЗаписатьИмяСвойства("success");
	ЗаписьJSON.ЗаписатьЗначение(Истина); 
	
	Баллы = РасчетБонусныхБаллов(Новый Структура("ДокументПродажи, БонуснаяПрограммаЛояльности, МаксимальныйПроцентОплатыБонусами, ЭтоБригадир, БаллыПартнераРассчитаны, БаллыПартнера", 
		Чек, Чек.БонуснаяПрограммаЛояльности, Чек.МаксимальныйПроцентОплатыБонусами, Чек.ЭтоБригадир, Ложь, Чек.БаллыПартнера));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("balance");
	ЗаписьJSON.ЗаписатьЗначение(Баллы.ДоступныеБаллы);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("savebalance");
	ЗаписьJSON.ЗаписатьЗначение(Баллы.БаллыПартнера);
	
КонецПроцедуры	

Процедура ЗаписатьHTTPРезультат(ЗаписьJSON, Результат)

	ЗаписьJSON.ЗаписатьИмяСвойства("success");    
	ЗаписьJSON.ЗаписатьЗначение(Результат);
	
КонецПроцедуры   

Процедура ЗаписатьHTTPГруппыПартнеров(ЗаписьJSON, Результат)   
	
	ЗаписьJSON.ЗаписатьИмяСвойства("groups"); 
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
    Для Каждого Группа Из Результат.ГруппыПартнеров Цикл
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
			ЗаписьJSON.ЗаписатьИмяСвойства("id");
		    ЗаписьJSON.ЗаписатьЗначение(Строка(Группа.Ссылка.УникальныйИдентификатор()));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("name");
			ЗаписьJSON.ЗаписатьЗначение(Группа.Наименование); 
			
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	КонецЦикла;   
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
КонецПроцедуры

Процедура ЗаписатьHTTPТекущееСостояниеККТ(ЗаписьJSON, Результат)   
	
	ЗаписьJSON.ЗаписатьИмяСвойства("deviceStatus"); 
    ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
	ЗаписьJSON.ЗаписатьИмяСвойства("batch");
    ЗаписьJSON.ЗаписатьЗначение(Результат.СтатусККТ.shift);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("coverOpened");
    ЗаписьJSON.ЗаписатьЗначение(Результат.СтатусККТ.coverOpened);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("paperPresent");
    ЗаписьJSON.ЗаписатьЗначение(Результат.СтатусККТ.paperPresent);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

Процедура ПроверитьНаличие(Данные, Поле, Сообщение)
	
	Если Данные.Результат И 
			((Не ЗначениеЗаполнено(Поле))
				Или (ТипЗнч(Поле) = Тип("Строка") И Поле = "undefined")) Тогда
		Данные.Результат = Ложь;
		Данные.Сообщение = Сообщение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти   

#Область ОбработкаВходныхЗапросов  

Функция СканироватьШтрихкод(ПараметрыВходногоЗапроса, ДанныеЗапроса)	   
	
	Попытка      
		Корзина = Неопределено;
		
		// Определение штрихкода - это сотрудник
		ПолучениеСотрудника = ПолучитьСотрудника(ПараметрыВходногоЗапроса, ДанныеЗапроса.Штрихкод); 
		Если Не ПолучениеСотрудника.Результат Или ПолучениеСотрудника.ТипШтрихкода = "Сотрудник" Тогда
			Возврат ПолучениеСотрудника;
		КонецЕсли;   
		
		// Для оставшихся типов штрихкода, кроме сотрудника (карта, товар, документ)
		ТипШтрихкода = "";
		СтрокаТовара = Неопределено;
		
		// Поиск карты покупателя
		ПолучениеПокупателя = ПолучитьПокупателяПоШтрихкоду(ДанныеЗапроса.Штрихкод);   
		Если Не ПолучениеПокупателя.Результат И ПолучениеПокупателя.ТипШтрихкода = "Карта" Тогда
			Возврат ПолучениеПокупателя; // карта аннулирована
		КонецЕсли;
		
		ПолучениеТекущейКорзины = ПолучитьТекущуюКорзину(ПараметрыВходногоЗапроса, ДанныеЗапроса.Документ);     
		Корзина = ПолучениеТекущейКорзины.Корзина;
		Если Не ПолучениеТекущейКорзины.Результат Тогда
			Возврат ПолучениеТекущейКорзины;
		КонецЕсли;     
		
		ИзменениеКорзины = ДоступностьИзмененияКорзины(Корзина, ДанныеЗапроса, ПараметрыВходногоЗапроса.ТипЗапроса);
		Если Не ИзменениеКорзины.Результат Тогда
			Возврат ИзменениеКорзины;	
		КонецЕсли;
		
		// Изменение в т. ч. пустого покупателя на розничного
		ИзменениеПартнераВКорзине = ИзменитьПартнераВКорзине(Корзина, ПолучениеПокупателя); 
		Если Не ИзменениеПартнераВКорзине.Результат Тогда    
			Возврат ИзменениеПартнераВКорзине;
		КонецЕсли;   
		
		// Карта по штрихкоду найдена   
		Если ПолучениеПокупателя.Результат И ПолучениеПокупателя.ТипШтрихкода = "Карта" Тогда 
			ТипШтрихкода = "Карта" 
			
		// Карта по штрихкоду не найдена   
		Иначе
			
			// Поиск товара по штрихкоду
			ДобавлениеТовараВКорзину = ДобавитьТоварВКорзину(Корзина, ДанныеЗапроса.Штрихкод);	
			Если ДобавлениеТовараВКорзину.Результат Тогда       
				ТипШтрихкода = "Товар"; 
				СтрокаТовара = ДобавлениеТовараВКорзину.СтрокаТовара;
				
				// Пересчет доступных для оплаты баллов после добавления товара
				Корзина.ДоступныеБаллы =
					РасчетБонусныхБаллов(Новый Структура("ДокументПродажи, БонуснаяПрограммаЛояльности, МаксимальныйПроцентОплатыБонусами, ЭтоБригадир, БаллыПартнераРассчитаны, БаллыПартнера", 
					Корзина, Корзина.БонуснаяПрограммаЛояльности, Корзина.МаксимальныйПроцентОплатыБонусами, Корзина.ЭтоБригадир, Истина, Корзина.БаллыПартнера)).ДоступныеБаллы;
					
			// Поиск документа
			Иначе   
			
				ВерсияКорзины = ПолучитьВерсиюКорзины(Корзина);
				
				// Сканирование документов только со 2-ой версии (для поэтапного внедрения)
				Если ВерсияКорзины.МажорныйНомер >= 2 Тогда

					ПолучениеДокумента = ПолучитьДокумент(Корзина, ДанныеЗапроса.Штрихкод);		
						
					Если ПолучениеДокумента.Результат Тогда 
						ТипШтрихкода = "Документ"; 	     
						
						// Для Чека ККМ и реализации сформировать Qr код заранее
						Если Корзина.ТипПродажи >= 10 И Корзина.ТипПродажи < 30 И Не ЗначениеЗаполнено(Корзина.ЗаказНаДоставку) И ЗначениеЗаполнено(Корзина.QRКод) Тогда   
							ЗаписатьQRКодВФоне(ПараметрыВходногоЗапроса, ?(Корзина.ТипПродажи = 10 Или Корзина.ТипПродажи = 11, Корзина.ЧекККМ, Корзина.Реализация), Корзина.QRКод);
						КонецЕсли;
						
					Иначе
						Возврат ПолучениеДокумента; // ничего не найдено
					КонецЕсли;
					
				// Если версия меньше 2.0.0, то вернуть неудачный результат поиска
				Иначе
					Возврат Новый Структура("Результат, ТипШтрихкода, Корзина, Сообщение", 
						Ложь, "", Корзина, "По штрихкоду " + ДанныеЗапроса.Штрихкод + " информация не найдена. Попробуйте отсканировать другой штрихкод.");	
				КонецЕсли;  
			КонецЕсли;         	
				
		КонецЕсли;
		
		// Запись корзины
		ЗаписьКорзины = ЗаписатьКорзину(Корзина);
		Если Не ЗаписьКорзины.Результат Тогда 
			Возврат ЗаписьКорзины;
		КонецЕсли;
		
		Возврат Новый Структура	("Результат, ТипШтрихкода, Корзина, СтрокаТовара, Сообщение", 
								Истина, ТипШтрихкода, Корзина, СтрокаТовара, ЗаписьКорзины.Сообщение);
	Исключение 
		Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецФункции  

Функция ИзменитьКоличество(ПараметрыВходногоЗапроса, ДанныеЗапроса)	   
	
	Попытка      
		Корзина = Неопределено;
		
		ПолучениеТекущейКорзины = ПолучитьТекущуюКорзину(ПараметрыВходногоЗапроса, ДанныеЗапроса.Документ);     
		Корзина = ПолучениеТекущейКорзины.Корзина;
		Если Не ПолучениеТекущейКорзины.Результат Тогда
			Возврат ПолучениеТекущейКорзины;
		КонецЕсли;  
		
		ИзменениеКорзины = ДоступностьИзмененияКорзины(Корзина, ДанныеЗапроса, ПараметрыВходногоЗапроса.ТипЗапроса);
		Если Не ИзменениеКорзины.Результат Тогда
			Возврат ИзменениеКорзины;	
		КонецЕсли;
			
		// Изменение количества товара
		ДобавлениеТовараВКорзину = ДобавитьТоварВКорзину(Корзина, ДанныеЗапроса.Штрихкод, ДанныеЗапроса.Количество, Истина);	
		Если Не ДобавлениеТовараВКорзину.Результат Тогда 
			Возврат ДобавлениеТовараВКорзину; // товар не найден
		КонецЕсли;         
		
		// Пересчет доступных для оплаты баллов после изменения количества товара
		Корзина.ДоступныеБаллы =
			РасчетБонусныхБаллов(Новый Структура("ДокументПродажи, БонуснаяПрограммаЛояльности, МаксимальныйПроцентОплатыБонусами, ЭтоБригадир, БаллыПартнераРассчитаны, БаллыПартнера", 
			Корзина, Корзина.БонуснаяПрограммаЛояльности, Корзина.МаксимальныйПроцентОплатыБонусами, Корзина.ЭтоБригадир, Истина, Корзина.БаллыПартнера)).ДоступныеБаллы;
		
		// Запись корзины
		ЗаписьКорзины = ЗаписатьКорзину(Корзина);
		Если Не ЗаписьКорзины.Результат Тогда 
			Возврат ЗаписьКорзины;
		КонецЕсли;
		
		Возврат Новый Структура	("Результат, Корзина, Сообщение", 
								Истина, Корзина, ЗаписьКорзины.Сообщение);
	Исключение 
		Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецФункции         

Функция УдалитьТовар(ПараметрыВходногоЗапроса, ДанныеЗапроса)	   
	
	Попытка      
		Корзина = Неопределено;
		
		ПолучениеТекущейКорзины = ПолучитьТекущуюКорзину(ПараметрыВходногоЗапроса, ДанныеЗапроса.Документ);     
		Корзина = ПолучениеТекущейКорзины.Корзина;
		Если Не ПолучениеТекущейКорзины.Результат Тогда
			Возврат ПолучениеТекущейКорзины;
		КонецЕсли;         
		
		ИзменениеКорзины = ДоступностьИзмененияКорзины(Корзина, ДанныеЗапроса, ПараметрыВходногоЗапроса.ТипЗапроса);
		Если Не ИзменениеКорзины.Результат Тогда
			Возврат ИзменениеКорзины;	
		КонецЕсли;
			
		// Удаление товара
		УдалениеТовараИзКорзины = УдалитьТоварИзКорзины(Корзина, ДанныеЗапроса.Штрихкод);	
		Если Не УдалениеТовараИзКорзины.Результат Тогда 
			Возврат УдалениеТовараИзКорзины; // товар не найден
		КонецЕсли;         
		
		// Пересчет доступных для оплаты баллов после удаления товара
		Корзина.ДоступныеБаллы =
			РасчетБонусныхБаллов(Новый Структура("ДокументПродажи, БонуснаяПрограммаЛояльности, МаксимальныйПроцентОплатыБонусами, ЭтоБригадир, БаллыПартнераРассчитаны, БаллыПартнера", 
			Корзина, Корзина.БонуснаяПрограммаЛояльности, Корзина.МаксимальныйПроцентОплатыБонусами, Корзина.ЭтоБригадир, Истина, Корзина.БаллыПартнера)).ДоступныеБаллы;
		
		// Запись корзины
		ЗаписьКорзины = ЗаписатьКорзину(Корзина);
		Если Не ЗаписьКорзины.Результат Тогда 
			Возврат ЗаписьКорзины;
		КонецЕсли;
		
		Возврат Новый Структура	("Результат, Корзина, Сообщение", 
								Истина, Корзина, ЗаписьКорзины.Сообщение);
	Исключение 
		Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецФункции  

Функция Авторизовать(ПараметрыВходногоЗапроса, ДанныеЗапроса)
	
	Попытка      
		Корзина = Неопределено;     
		
		ПолучениеПокупателя = ПолучитьПокупателяПоНомеруТелефона(ДанныеЗапроса.НомерТелефона);   
		Если Не ПолучениеПокупателя.Результат Тогда                                                      
			ПолучениеПокупателя.Сообщение = "Авторизация по номеру телефона " + ФорматированныйНомерТелефона(ДанныеЗапроса.НомерТелефона) + " не пройдена";
			Возврат ПолучениеПокупателя; 
		КонецЕсли;      
		
		ПолучениеТекущейКорзины = ПолучитьТекущуюКорзину(ПараметрыВходногоЗапроса, ДанныеЗапроса.Документ);     
		Корзина = ПолучениеТекущейКорзины.Корзина;
		Если Не ПолучениеТекущейКорзины.Результат Тогда
			Возврат ПолучениеТекущейКорзины;
		КонецЕсли;     
		
		ИзменениеКорзины = ДоступностьИзмененияКорзины(Корзина, ДанныеЗапроса, ПараметрыВходногоЗапроса.ТипЗапроса);
		Если Не ИзменениеКорзины.Результат Тогда
			Возврат ИзменениеКорзины;	
		КонецЕсли;
		
		// Для выписанных документов можно авторизовываться только с тем же номером
		ИзменениеКорзины = ДоступностьИзмененияКорзины(Корзина, ДанныеЗапроса, ПараметрыВходногоЗапроса.ТипЗапроса);
		Если Не ИзменениеКорзины.Результат И ДанныеЗапроса.НомерТелефона <> Корзина.НомерТелефона Тогда
			Возврат Новый Структура	("Результат, Корзина, Сообщение", Ложь, Корзина, "Авторизация доступна только по номеру телефона " + ФорматированныйНомерТелефона(Корзина.НомерТелефона));
		КонецЕсли;
		
		// Изменение в т. ч. пустого покупателя на розничного
		ИзменениеПартнераВКорзине = ИзменитьПартнераВКорзине(Корзина, ПолучениеПокупателя); 
		Если Не ИзменениеПартнераВКорзине.Результат Тогда
			Возврат ИзменениеПартнераВКорзине;
		КонецЕсли;  
		
		// Запись корзины
		ЗаписьКорзины = ЗаписатьКорзину(Корзина);
		Если Не ЗаписьКорзины.Результат Тогда 
			Возврат ЗаписьКорзины;
		КонецЕсли;     
		
		Возврат Новый Структура	("Результат, Корзина, Сообщение", Истина, Корзина, ЗаписьКорзины.Сообщение);
		
	Исключение 
		Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецФункции              

Функция Зарегистрировать(ПараметрыВходногоЗапроса, ДанныеЗапроса)
	
	Попытка      
		Корзина = Неопределено;     
		
		ПолучениеПокупателя = ПолучитьПокупателяПоНомеруТелефона(ДанныеЗапроса.НомерТелефона);   
		Если ПолучениеПокупателя.Результат Тогда
			Возврат Новый Структура("Результат, Сообщение", Ложь, "Номер " + ФорматированныйНомерТелефона(ДанныеЗапроса.НомерТелефона) + " уже зарегистрирован. Авторизуйтесь.");
		КонецЕсли;    
		
		СозданиеПокупателя = СоздатьПокупателя(ДанныеЗапроса);   
		Если Не СозданиеПокупателя.Результат Тогда
			Возврат СозданиеПокупателя;
		КонецЕсли;   		
		
		ПолучениеТекущейКорзины = ПолучитьТекущуюКорзину(ПараметрыВходногоЗапроса, ДанныеЗапроса.Документ);     
		Корзина = ПолучениеТекущейКорзины.Корзина;
		Если Не ПолучениеТекущейКорзины.Результат Тогда
			Возврат ПолучениеТекущейКорзины;
		КонецЕсли;    
		
		ИзменениеКорзины = ДоступностьИзмененияКорзины(Корзина, ДанныеЗапроса, ПараметрыВходногоЗапроса.ТипЗапроса);
		Если Не ИзменениеКорзины.Результат Тогда
			Возврат ИзменениеКорзины;	
		КонецЕсли;
		
		// Изменение в т. ч. пустого покупателя на розничного                 
		ИзменениеПартнераВКорзине = ИзменитьПартнераВКорзине(Корзина, СозданиеПокупателя); 
		Если Не ИзменениеПартнераВКорзине.Результат Тогда
			Возврат ИзменениеПартнераВКорзине;
		КонецЕсли;  
		
		// Запись корзины
		ЗаписьКорзины = ЗаписатьКорзину(Корзина);
		Если Не ЗаписьКорзины.Результат Тогда 
			Возврат ЗаписьКорзины;
		КонецЕсли;     
		
		Возврат Новый Структура	("Результат, Корзина, Сообщение", Истина, Корзина, ЗаписьКорзины.Сообщение);
		
	Исключение 
		Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецФункции  

Функция ОткрытьСмену(ПараметрыВходногоЗапроса)   
	
	ДатаИзменения = ТекущаяДата();               
	Корзина = Неопределено;
	
	// Смена АТОЛ
	ДействияСКассовойСменойАТОЛ = ДопМодульСервер.ПроверитьАктуальностьСменыАТОЛ(ПараметрыВходногоЗапроса.КассаСамообслуживания);    
	Если Не ДействияСКассовойСменойАТОЛ.Результат Тогда
		Возврат ДействияСКассовойСменойАТОЛ;
	КонецЕсли;             
	
	// Создать документы КассоваяСмена и ОтчетОРозничныхПродажах        
	ПроверкаКассовойСменыККМ = ДопМодульСервер.ПроверитьАктуальностьСменыККМ(ПараметрыВходногоЗапроса.РабочееМестоСамообслуживания, ПараметрыВходногоЗапроса.КассаККМ, 
		ДействияСКассовойСменойАТОЛ.СменаУжеОткрыта, ДействияСКассовойСменойАТОЛ.ДатаЗакрытияСмены);
	Если Не ПроверкаКассовойСменыККМ.Результат <> "" Тогда      
		Возврат ПроверкаКассовойСменыККМ;
	КонецЕсли;    
	
	// Если по Атолу или по смене ККМ было закрытие, то зафиксировать закрытие 
	Если Не ДействияСКассовойСменойАТОЛ.СменаУжеОткрыта Или Не ПроверкаКассовойСменыККМ.СменаУжеОткрыта Тогда  
		
		ПолучениеТекущейКорзины = ПолучитьТекущуюКорзину(ПараметрыВходногоЗапроса, , , Ложь);
		Корзина = ПолучениеТекущейКорзины.Корзина;
		Если Не ПолучениеТекущейКорзины.Результат Тогда
			Возврат ПолучениеТекущейКорзины;
		КонецЕсли;  
		
		Корзина.СменаЗакрыта = Ложь;
		Корзина.ДатаИзмененияСмены = ДатаИзменения;     
		
		ЗаписьКорзины = ЗаписатьКорзину(Корзина);
		Если Не ЗаписьКорзины.Результат Тогда 
			Возврат ЗаписьКорзины;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Новый Структура	("Результат, Корзина, Сообщение", Истина, Корзина, "");
	
КонецФункции	

Функция ЗакрытьСмену(ПараметрыВходногоЗапроса)  
	
	ДатаИзменения = ТекущаяДата();     
	Корзина = Неопределено;
	
	// Смена АТОЛ
	ЗакрытиеСменыАТОЛ = ДопМодульСервер.ЗакрытьСменуАТОЛ(ПараметрыВходногоЗапроса.КассаСамообслуживания); 
	Если Не ЗакрытиеСменыАТОЛ.Результат Тогда    
		Возврат ЗакрытиеСменыАТОЛ;
	КонецЕсли; 
	
    // Смена ККМ
	ЗакрытиеСменыККМ  = ДопМодульСервер.ЗакрытьСменуККМ(ПараметрыВходногоЗапроса.РабочееМестоСамообслуживания, ПараметрыВходногоЗапроса.КассаККМ);
	Если Не ЗакрытиеСменыККМ.Результат Тогда               
		Возврат ЗакрытиеСменыККМ;
	КонецЕсли;         
	
	// Если по Атолу или по смене ККМ было закрытие, то зафиксировать закрытие 
	Если Не ЗакрытиеСменыАТОЛ.СменаУжеЗакрыта Или Не ЗакрытиеСменыККМ.СменаУжеЗакрыта Тогда  
		
		ПолучениеТекущейКорзины = ПолучитьТекущуюКорзину(ПараметрыВходногоЗапроса, , , Ложь);
		Корзина = ПолучениеТекущейКорзины.Корзина;
		Если Не ПолучениеТекущейКорзины.Результат Тогда
			Возврат ПолучениеТекущейКорзины;
		КонецЕсли;  
		
		Корзина.СменаЗакрыта = Истина;
		Корзина.ДатаИзмененияСмены = ДатаИзменения;     
		
		ЗаписьКорзины = ЗаписатьКорзину(Корзина);
		Если Не ЗаписьКорзины.Результат Тогда 
			Возврат ЗаписьКорзины;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Новый Структура	("Результат, Корзина, Сообщение", Истина, Корзина, "");
	
КонецФункции

Функция РасчитатьСкидкиВЧеке(ПараметрыВходногоЗапроса)
	
	Попытка   
		Корзина = Неопределено;
		Чек = Неопределено; 	 
		
		ПолучениеТекущейКорзины = ПолучитьТекущуюКорзину(ПараметрыВходногоЗапроса, , Ложь);     
		Корзина = ПолучениеТекущейКорзины.Корзина;
		Если Не ПолучениеТекущейКорзины.Результат Тогда
			Возврат ПолучениеТекущейКорзины;
		КонецЕсли;    
		
		// Пустую корзину не записываем 
		Если Не ЗначениеЗаполнено(ПолучениеТекущейКорзины.Корзина.СуммаДокумента) Тогда 
			Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, ПолучениеТекущейКорзины.Корзина, "Нет товаров в текущей покупке");
		КонецЕсли;
		
		ЗаписьЧекаСоСкидками = ЗаписатьЧекСоСкидками(ПолучениеТекущейКорзины.Корзина); 
		Чек = ЗаписьЧекаСоСкидками.Чек; 
		Если Не ЗаписьЧекаСоСкидками.Результат Тогда 
			Возврат ЗаписьЧекаСоСкидками;
		КонецЕсли;   	
	
		Возврат Новый Структура	("Результат, Чек, Корзина, Сообщение", Истина, Чек, Корзина, ЗаписьЧекаСоСкидками.Сообщение);
		
	Исключение 
		Возврат Новый Структура("Результат, Чек, Корзина, Сообщение", Ложь, Чек, Корзина, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецФункции

Функция РасчитатьОплатуВЧеке(ПараметрыВходногоЗапроса, ДанныеЗапроса) 
	
	Попытка    
		Чек = Неопределено; 	 
		
		ДанныеЗапроса.НомерПлатежнойКарты = Прав(ДанныеЗапроса.НомерПлатежнойКарты, 22);   
		ДанныеЗапроса.СсылочныйНомер = Лев(ДанныеЗапроса.СсылочныйНомер, 100);   
		ДанныеЗапроса.НомерЧекаЭТ = Лев(ДанныеЗапроса.НомерЧекаЭТ, 10);
		ДанныеЗапроса.КодАвторизации = Лев(ДанныеЗапроса.КодАвторизации, 6);   
		ДанныеЗапроса.ИдентификаторТранзакции = Лев(ДанныеЗапроса.ИдентификаторТранзакции, 100); 
		ДанныеЗапроса.ПечататьБумажныйЧек = ?(ДанныеЗапроса.ПечататьБумажныйЧек = "1", Истина, Ложь); 
		ДанныеЗапроса.КОплатеБаллами = ?(ЗначениеЗаполнено(ДанныеЗапроса.КОплатеБаллами), ДанныеЗапроса.КОплатеБаллами, 0);
		ДанныеЗапроса.ПочтаКлиента = ?(ЗначениеЗаполнено(ДанныеЗапроса.ПочтаКлиента), ДанныеЗапроса.ПочтаКлиента, "");
		ДанныеЗапроса.СуммаОплаты = Число(ДанныеЗапроса.СуммаОплаты);
		ДанныеЗапроса.КОплатеБаллами = Число(ДанныеЗапроса.КОплатеБаллами);
		
		ДанныеЗапроса.Вставить("ТерминалСсылка", Справочники.ЭквайринговыеТерминалы.НайтиПоКоду(ДанныеЗапроса.ЭквайринговыйТерминал));			
		Если ДанныеЗапроса.ТерминалСсылка = ПредопределенноеЗначение("Справочник.ЭквайринговыеТерминалы.ПустаяСсылка") Тогда     
			Возврат Новый Структура	("Результат, Чек, Сообщение", Ложь, Чек, "Эквайринговый терминал " + ДанныеЗапроса.ЭквайринговыйТерминал + " не найден");
		КонецЕсли;	   
		
		ПолучениеЧека = ПолучитьЧек(ДанныеЗапроса.Документ);     
		Чек = ПолучениеЧека.Чек;
		Если Не ПолучениеЧека.Результат Тогда
			Возврат ПолучениеЧека;
		КонецЕсли; 	    
		
		Если Чек.Кассир <> ПараметрыВходногоЗапроса.Кассир Тогда 
			Возврат Новый Структура("Результат, Чек, Сообщение", Ложь, Чек,  "Чек был создан пользователем '" + Строка(Чек.Кассир) + 
				"'. Не возможно пробитие под пользователем '" + Строка(ПараметрыВходногоЗапроса.Кассир) + "'.");
		КонецЕсли;
		
		Если Чек.СуммаДокумента + Чек.КОплатеБаллами <> ДанныеЗапроса.СуммаОплаты + ДанныеЗапроса.КОплатеБаллами Тогда 
			Возврат Новый Структура	("Результат, Чек, Сообщение", Ложь, Чек, 
				"Оплата не совпадает с чеком. По чеку: " + Формат(Чек.СуммаДокумента + Чек.КОплатеБаллами, "ЧДЦ=2") + " руб, " +
				"сумма оплаты: " + Формат(ДанныеЗапроса.СуммаОплаты, "ЧДЦ=2") + " руб" +
				?(ДанныеЗапроса.КОплатеБаллами > 0, ", баллы: " + Формат(ДанныеЗапроса.КОплатеБаллами, "ЧДЦ=2"), "") + ".");
		КонецЕсли;
		
		Если ДанныеЗапроса.КОплатеБаллами > 0 И ДанныеЗапроса.КОплатеБаллами > Чек.ДоступныеБаллы Тогда   
			Возврат Новый Структура("Результат, Чек, Сообщение", Ложь, Чек, "Баллы к оплате " + ДанныеЗапроса.КОплатеБаллами + ". Доступных баллов только " + Чек.ДоступныеБаллы);
		КонецЕсли;
		
		// Проверка на уже существующую оплату и невозможность оплаты заказа с реализациями
		ВозможностьОплаты = ВозможностьОплаты(Чек);
		Если Не ВозможностьОплаты.Результат Тогда
			Возврат ВозможностьОплаты;
		КонецЕсли;         
		
		// Для реализации с заказом нельзя списать другую сумму баллов, чем в документе
		Если Чек.ТипПродажи = 20 И Чек.ЗаказСРеализацией Тогда
			
			Если Чек.КОплатеБаллами <>  ДанныеЗапроса.КОплатеБаллами Тогда   
				Возврат Новый Структура("Результат, Чек, Сообщение", Ложь, Чек, "Для документа " + Строка(Чек.Реализация) + " по " + Строка(Чек.ЗаказКлиента) + " можно списать количество баллов " + Строка(Чек.КОплатеБаллами) +  ", а не " + Строка(ДанныеЗапроса.КОплатеБаллами) + ".");
			КонецЕсли;
		КонецЕсли;
	
		ЗаписьЧекаСОплатой = ЗаписатьЧекСОплатой(ПараметрыВходногоЗапроса, ДанныеЗапроса, ПолучениеЧека.Чек);  
		Если Не ЗаписьЧекаСОплатой.Результат Тогда 
			Возврат ЗаписьЧекаСОплатой;
		КонецЕсли;   
		
		ПробитиеПродажи = ПробитьПродажу(Чек);
		Если Не ПробитиеПродажи.Результат Тогда 
			
			ЗаписьЧекОшибкаПробития = ЗаписатьЧекСамообслуживания(Чек,  Новый Структура("ОшибкаПробития", ПробитиеПродажи.Сообщение));
			Если Не ЗаписьЧекОшибкаПробития.Результат Тогда
				ПробитиеПродажи.Сообщение = ПробитиеПродажи.Сообщение + " " + ЗаписьЧекОшибкаПробития.Сообщение;
			КонецЕсли;
			
			Возврат ПробитиеПродажи;
		КонецЕсли;     
		
		Возврат Новый Структура	("Результат, Чек, Сообщение", Истина, Чек, "");
	
	Исключение 
		Возврат Новый Структура("Результат, Чек, Сообщение", Ложь, Чек, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецФункции

Функция ПолучитьГруппыПартнеров(ПараметрыВходногоЗапроса)
	
	Попытка    
		Возврат Новый Структура	("Результат, ГруппыПартнеров, Сообщение", Истина, ГруппыПартнеров(), "");
		
	Исключение 
		Возврат Новый Структура("Результат, ГруппыПартнеров, Сообщение", Ложь, Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецФункции  

Функция НапечататьПропуск(ПараметрыВходногоЗапроса, ДанныеЗапроса)

	Попытка      
		Корзина = Неопределено;
		
		ПолучениеТекущейКорзины = ПолучитьТекущуюКорзину(ПараметрыВходногоЗапроса, ДанныеЗапроса.Документ);     
		Корзина = ПолучениеТекущейКорзины.Корзина;
		Если Не ПолучениеТекущейКорзины.Результат Тогда
			Возврат ПолучениеТекущейКорзины;
		КонецЕсли;  
		
		ИзменениеКорзины = ДоступностьИзмененияКорзины(Корзина, ДанныеЗапроса, ПараметрыВходногоЗапроса.ТипЗапроса);
		Если Не ИзменениеКорзины.Результат Тогда
			Возврат ИзменениеКорзины;	
		КонецЕсли;  
		
		// Продажа на КСО
		Если Корзина.ТипПродажи = 0 Тогда  
			
			Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, "Для покупки на кассе самообслуживания пропуск не нужен");        
			
		// Заказ клиента
		ИначеЕсли Корзина.ТипПродажи = 30 Или Корзина.ТипПродажи = 31 Тогда  
			
			Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, "Для заказа клиента пропуск не доступен");
			
		// Документ еще не оплачен, проверка, что может уже оплачен в другом месте 	
		ИначеЕсли Корзина.ТипПродажи % 10 = 0 Тогда      
			
			ТипПродажи = ПолучитьТипПродажи(?(Корзина.ТипПродажи = 10, Корзина.ЧекККМ, Корзина.Реализация));
			Если Корзина.ТипПродажи <> ТипПродажи Тогда
				Корзина.ТипПродажи = ТипПродажи;
				ЗаписьКорзины = ЗаписатьКорзину(Корзина);
			КонецЕсли;
		КонецЕсли;              
		
		Если Корзина.ТипПродажи % 10 = 0 Тогда 
			Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, "Для получения пропуска документ нужно оплатить");
		КонецЕсли;          
		
		// Заказ на доставку исключает пропуск
		Если ЗначениеЗаполнено(Корзина.ЗаказНаДоставку) Тогда
			Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, "Пропуск не выдается при наличии доставки: " + Строка(Корзина.ЗаказНаДоставку));
		КонецЕсли;
		
		ПараметрыАТОЛ = ДопМодульСервер.ЗаполнитьПараметрыАТОЛОсновные(ПараметрыВходногоЗапроса.КассаСамообслуживания);
		ОтправкаНаПечатьПропуска = ОтправитьНаПечатьПропуск(ПараметрыАТОЛ, Корзина); 
		ОтправкаНаПечатьПропуска.Вставить("Корзина", Корзина);
		
		Возврат ОтправкаНаПечатьПропуска;
	Исключение 
		Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецФункции	

#КонецОбласти  
                                                                                                                                                           
#Область Корзина  

Функция ПолучитьСсылкуКорзиныПоКассиру(Кассир)  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
		"ВЫБРАТЬ 
		|	Ссылка
		|ИЗ 
		|	Документ.КорзинаСамообслуживания
       	|ГДЕ
       	|	Кассир = &Кассир"; 		 
	
	Запрос.УстановитьПараметр("Кассир", Кассир);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Ссылка = ПредопределенноеЗначение("Документ.КорзинаСамообслуживания.ПустаяСсылка");
	Если Выборка.Следующий() Тогда 	 
		Ссылка = Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции  

Функция ПолучитьСсылкуКорзиныПоИдентификатору(Идентификатор, ЭтоКорзина = Истина)
	
	Результат = Ложь;
	Ссылка = ?(ЭтоКорзина, ПредопределенноеЗначение("Документ.КорзинаСамообслуживания.ПустаяСсылка"),ПредопределенноеЗначение("Документ.ЧекСамообслуживания.ПустаяСсылка")) ;    
	Сообщение = "";	
	Попытка
		Ссылка = ?(ЭтоКорзина, Документы.КорзинаСамообслуживания.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)), Документы.ЧекСамообслуживания.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)));			
		Результат = Истина;
	Исключение
		Сообщение = ?(ЭтоКорзина, "Корзина не найдена", "Чек самоообслуживания не найден");
	КонецПопытки;
			
	Если Не ЗначениеЗаполнено(Ссылка.Номер) Тогда 
		Результат = Ложь;
		Сообщение = ?(ЭтоКорзина, "Корзина не найдена", "Чек самоообслуживания не найден");
	КонецЕсли;  
	
	Возврат Новый Структура("Результат, Ссылка, Корзина, Сообщение", Результат, Ссылка, Неопределено, Сообщение);
		
КонецФункции

Функция УдалитьКорзину(ПараметрыВходногоЗапроса, Корзина) 
	
	Попытка
		Если Корзина <> Неопределено Тогда   

			НеУдалятьРозничногоПокупателя = ?(Корзина.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель"), 
				", Партнер, Соглашение, ВидЦены, ОбщийВидЦены, КартаЛояльности, НомерКарты, НомерТелефона, АдресЭП, ГруппаПартнера, 
				|  УчастиеВБонуснойПрограмме, БаллыПартнера, ДоступныеБаллы, БонуснаяПрограммаЛояльности, МаксимальныйПроцентОплатыБонусами, ЭтоБригадир", "");
				
			ЗаполнитьЗначенияСвойств(Корзина, ПредопределенноеЗначение("Документ.КорзинаСамообслуживания.ПустаяСсылка"),, 
				"Номер, Дата, Кассир, КассаККМ, СменаЗакрыта, ДатаИзмененияСмены, Организация, Подразделение, Склад, Валюта, НалогообложениеНДС, ЦенаВключаетНДС, Версия" + НеУдалятьРозничногоПокупателя); 
			Корзина.Дата = ТекущаяДата();    
			Корзина.Товары.Очистить();
			
			Возврат Новый Структура("Результат, Корзина, Сообщение", Истина, Корзина, "");	
		Иначе
			Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, "Корзина не найдена");
		КонецЕсли;	
	Исключение 
		Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецФункции

Функция СоздатьКорзину(ПараметрыВходногоЗапроса) 
	
	Попытка
		Корзина = Документы.КорзинаСамообслуживания.СоздатьДокумент();  
		ЗаполнитьЗначенияСвойств(Корзина, ПараметрыВходногоЗапроса);
		Корзина.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		Корзина.ЦенаВключаетНДС = Истина;       
		Корзина.НалогообложениеНДС = АльтерраОбщегоНазначения.ПолучитьНалогообложениеНДС(Корзина.Организация);
		Корзина.Дата = ТекущаяДата();
		
		Возврат Новый Структура("Результат, Корзина, Сообщение", Истина, Корзина, "");
		
	Исключение 
		Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецФункции

Функция ПолучитьКорзинуПоСсылке(Ссылка, КоличествоПопыток = 1, Таймаут = 1) 
	
	Результат = Ложь;      
	Корзина = Неопределено;
	Сообщение = "";
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ТекущаяПопытка = 1;    
		Корзина = Ссылка.ПолучитьОбъект(); 

		Пока ТекущаяПопытка <= КоличествоПопыток Цикл  
			
			Попытка
				Корзина.Заблокировать();
				Результат = Истина;
				Прервать;
			Исключение          
				Корзина = Ссылка.ПолучитьОбъект(); 
			КонецПопытки;    
			
			ТекущаяПопытка = ТекущаяПопытка + 1;
			Б_ОбменССайтомСервер.Таймаут(Таймаут);
		КонецЦикла; 
		
		Если Не Результат Тогда
			Сообщение = "Действие не выполнено. Повторите попытку."
		КонецЕсли;
		
	Иначе           
		Результат = Ложь;
		Сообщение = "Корзина не определена";
	КонецЕсли;

	Возврат Новый Структура("Результат, Корзина, Сообщение", Результат, Корзина, Сообщение);
	
КонецФункции	

Функция ДоступностьИзмененияКорзины(Корзина, ДанныеЗапроса, ТипЗапроса)
	
	// Продажа не на КСО и не начало новой
	Если Корзина.ТипПродажи <> 0 И ДанныеЗапроса.Документ <> Неопределено Тогда    
		
		// Ограничения авторизации 
		Если ТипЗапроса = "Login" Тогда                                                                                                          
			
			// Оплаченные документы
			Если Корзина.ТипПродажи % 10 = 1 Тогда
				Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, "Авторизация по оплаченному документу невозможна");      
				
			// Неоплаченные документы	
			ИначеЕсли Корзина.ТипПродажи % 10 = 0 Тогда
				Если  Корзина.НомерТелефона <> ДанныеЗапроса.НомерТелефона Тогда
					Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, "Авторизация возможна только для номера " + ФорматированныйНомерТелефона(Корзина.НомерТелефона));      	
				КонецЕсли;
			КонецЕсли;        
			
		// Ограничения печати пропуска
		ИначеЕсли ТипЗапроса = "printPass" Тогда
			
			// Неоплаченные документы	
			Если Корзина.ТипПродажи % 10 = 0 Тогда 
				Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, "Для получения пропуска документ нужно оплатить");
			КонецЕсли;                  
			
		
		// Сканирование того же документа по qr или штрикходу
		ИначеЕсли ТипЗапроса = "onScan" Тогда
			
			Если Не (Корзина.Штрихкод = ДанныеЗапроса.Штрихкод Или Корзина.QrКод = ДанныеЗапроса.Штрихкод) Тогда
				Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, "Сканирование в документ не разрешается");
			КонецЕсли;
			
		// Запросы изменения запрещены, кроме авторизации, печати пропуска, повторное сканирование того же документа
		Иначе
			Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, "Документ создан не на кассе самообслуживания. Изменение невозможно.");      	
		КонецЕсли;			
	КонецЕсли;
		
	Возврат Новый Структура("Результат, Корзина, Сообщение", Истина, Корзина, "");                                              
	
КонецФункции	

Функция РазблокироватьКорзину(Корзина)  
	
	Если Корзина <> Неопределено Тогда   
		Попытка      
			Корзина.Разблокировать();
		Исключение 
			Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, "Корзина не разблокирована")
		КонецПопытки; 
	КонецЕсли;      
	
	Возврат Новый Структура("Результат, Корзина, Сообщение", Истина, Корзина, "");

КонецФункции

Функция ЗаписатьКорзину(Корзина)
	
	Попытка
		Корзина.Записать(); 
		Возврат Новый Структура("Результат, Корзина, Сообщение", Истина, Корзина, "");
	Исключение	       
		Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, "Не записана корзина текущей покупки: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;  
	
КонецФункции	

Функция ПолучитьТекущуюКорзину(ПараметрыВходногоЗапроса, Документ = Неопределено, НачатьНовуюПродажу = Истина, ПроверитьСмену = Истина)     
	
	Попытка     
		Корзина = Неопределено;
		
		// Найти текущую корзину
		Если Документ = Неопределено Тогда
			
			СсылкаКорзины = ПолучитьСсылкуКорзиныПоКассиру(ПараметрыВходногоЗапроса.Кассир);  		
			
			// При наличии корзины предыдущей покупки удалить ее
			Если ЗначениеЗаполнено(СсылкаКорзины) Тогда                       
				
				ПолучениеКорзины = ПолучитьКорзинуПоСсылке(СсылкаКорзины); 
				Если Не ПолучениеКорзины.Результат Тогда 
					Возврат ПолучениеКорзины;
				КонецЕсли;
				Корзина = ПолучениеКорзины.Корзина; 
				
				// Очистить корзину перед новой продажей
				Если НачатьНовуюПродажу Тогда
					УдалениеКорзины = УдалитьКорзину(ПараметрыВходногоЗапроса, ПолучениеКорзины.Корзина); 
					Если Не УдалениеКорзины.Результат Тогда
						Возврат УдалениеКорзины;
					КонецЕсли;                   
				КонецЕсли;
				
			// Создать новую корзину текущей покупки (при первом подключении)	
			Иначе
				СозданиеКорзины = СоздатьКорзину(ПараметрыВходногоЗапроса);  
				Если Не СозданиеКорзины.Результат Тогда  
					Возврат СозданиеКорзины;          
				КонецЕсли;
				Корзина = СозданиеКорзины.Корзина;  
			КонецЕсли;         
			
		// Продолжить текущую продажу
		Иначе		
			ПолучениеСсылкиКорзины = ПолучитьСсылкуКорзиныПоИдентификатору(Документ);   
			Если Не ПолучениеСсылкиКорзины.Результат Тогда    
				Возврат ПолучениеСсылкиКорзины;  
			КонецЕсли;
				
			ПолучениеКорзины = ПолучитьКорзинуПоСсылке(ПолучениеСсылкиКорзины.Ссылка);   
			Если Не ПолучениеКорзины.Результат Тогда
				Возврат ПолучениеКорзины;
			КонецЕсли;
			Корзина = ПолучениеКорзины.Корзина;   
			
		КонецЕсли;   
	
		// Проверка вовремя открытой смены
		Если ПроверитьСмену Тогда
			ПроверкаСмены = ПроверитьСменуКорзины(Корзина); 
			Если Не ПроверкаСмены.Результат Тогда
				Возврат ПроверкаСмены;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Новый Структура("Результат, Корзина, Сообщение", Истина, Корзина, "");
		
	Исключение 
		Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецФункции      

Функция ПроверитьСменуКорзины(Корзина) 
	
	Если Корзина <> Неопределено И ЗначениеЗаполнено(Корзина.ДатаИзмененияСмены) Тогда
		Если Корзина.СменаЗакрыта 
			Или (Не Корзина.СменаЗакрыта И НачалоДня(Корзина.ДатаИзмененияСмены) < НачалоДня(ТекущаяДата())) Тогда
				Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, "Для продолжения работы необходимо открыть кассовую смену.");
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Новый Структура("Результат", Истина);

КонецФункции	

Функция ИзменитьПартнераВКорзине(Корзина, Покупатель) 
	
	Попытка       
		Если Корзина <> Неопределено Тогда  
			
			ЕстьИзменения = Ложь;
			
			// Если покупатель не найден, а покупатель пустой, то должен быть Розничный покупатель
			Если Не Покупатель.Результат Тогда
			
				Если Корзина.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка") Тогда
					Корзина.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель");
					ЕстьИзменения = Истина;
				КонецЕсли;     
				
			// Покупатель найден
			Иначе     
				Если Корзина.Партнер <> Покупатель.Партнер Тогда
					Корзина.Партнер = Покупатель.Партнер;
					ЕстьИзменения = Истина;
				КонецЕсли;         
			КонецЕсли;
			
			Если ЕстьИзменения Тогда 
				
				Корзина.Соглашение = АльтерраОбщегоНазначения.ПолучитьСоглашениеПоУмолчанию(Корзина.Партнер, Корзина.Подразделение, Корзина.КартаЛояльности, ТекущаяДата());
				ВидЦеныДокумента = ВидЦеныДокумента(Корзина); 
				ЗаполнитьЗначенияСвойств(Корзина, ВидЦеныДокумента, "ВидЦены, ОбщийВидЦены");
				
				Корзина.КартаЛояльности = ?( Покупатель.Свойство("Карта"), Покупатель.Карта, ПредопределенноеЗначение("Справочник.КартыЛояльности.ПустаяСсылка"));
				Корзина.НомерКарты = Покупатель.Штрихкод;
				Корзина.НомерТелефона = Покупатель.НомерТелефона;
				Корзина.АдресЭП = Покупатель.АдресЭП;       
				Корзина.БонуснаяПрограммаЛояльности = Покупатель.БонуснаяПрограммаЛояльности;
				Корзина.МаксимальныйПроцентОплатыБонусами = Покупатель.МаксимальныйПроцентОплатыБонусами;
				
				ПолучениеГруппыПартнера = ПолучитьГруппуПартнера(Корзина.Партнер);		
				Корзина.ГруппаПартнера = ПолучениеГруппыПартнера.ГруппаПартнера; 
				Корзина.УчастиеВБонуснойПрограмме = ПолучениеГруппыПартнера.УчастиеВБонуснойПрограмме; 
				Корзина.ЭтоБригадир = ПолучениеГруппыПартнера.ЭтоБригадир; 
				
				// Пересчитать цены в корзине
				Если Корзина.Товары.Количество() > 0 Тогда 
					
					// Пересчет вида цены товара   
					Для Каждого СтрокаКорзины Из Корзина.Товары Цикл
						СтрокаКорзины.ВидЦены = ВидЦеныСтрокиДокумента(Корзина, СтрокаКорзины.Номенклатура);
					КонецЦикла;
					
					// Пересчет вида цены товара   
					ПересчетЦенВСтроке = ПересчитатьЦеныВСтроке(Корзина); 
					Если Не ПересчетЦенВСтроке.Результат Тогда   
						Возврат ПересчетЦенВСтроке;
					КонецЕсли;                     
					
					Корзина.СуммаДокумента = Корзина.Товары.Итог("Сумма");
				КонецЕсли;
				
				// Баллы для оплаты
				ЗаполнитьЗначенияСвойств(Корзина, 
					РасчетБонусныхБаллов(Новый Структура("ДокументПродажи, БонуснаяПрограммаЛояльности, МаксимальныйПроцентОплатыБонусами, ЭтоБригадир, БаллыПартнераРассчитаны, БаллыПартнера", 
						Корзина, Корзина.БонуснаяПрограммаЛояльности, Корзина.МаксимальныйПроцентОплатыБонусами, Корзина.ЭтоБригадир, Ложь, 0)));
			КонецЕсли;
		Иначе
			Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, "Корзина не найдена");
		КонецЕсли;		
		
		Возврат Новый Структура("Результат, Корзина, Сообщение", Истина, Корзина, "");
		
	Исключение 
		Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецФункции

Функция ДобавитьТоварВКорзину(Корзина, Штрихкод, Количество = 1, НеДобавлять = Ложь)
	
	Попытка  
		Если Корзина <> Неопределено Тогда
			
			Отбор = Новый Структура("Штрихкод", Штрихкод);
			НайденныеТовары = Корзина.Товары.НайтиСтроки(Отбор);  
			
			Если НайденныеТовары.Количество() > 0 Тогда
				СтрокаТовара =  НайденныеТовары[0]; 
				СтрокаТовара.Количество = ?(НеДобавлять, 0, СтрокаТовара.Количество) + Количество;
				СтрокаТовара.КоличествоУпаковок = СтрокаТовара.Количество;
				СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;   
				СтрокаТовара.СуммаСНДС = СтрокаТовара.Сумма;
				СтавкаНДС = СтрокаТовара.СтавкаНДС.Ставка;
				СтрокаТовара.СуммаНДС = Окр(СтрокаТовара.Сумма * СтавкаНДС / (100 + СтавкаНДС), 2, РежимОкругления.Окр15как20);
			Иначе     
				Если НеДобавлять Тогда
					Возврат Новый Структура("Результат, ТипШтрихкода, Корзина, Сообщение", Ложь, "", Корзина, "Штрихкод " + Штрихкод + " в текущей покупке не найден");	
				КонецЕсли;
				
				// Определение товара и цен      
				Товар = ПолучитьВесЦеныТовара(Корзина.Подразделение, Корзина.Валюта, ШтрихКод);  
				
				Если Не Товар.Результат Тогда    
					Возврат Новый Структура("Результат, ТипШтрихкода, Корзина, Сообщение", Ложь, "", Корзина, "Товар по штрихкоду " + Штрихкод + " не найден");			
				КонецЕсли;

				СтрокаТовара = Корзина.Товары.Добавить();     
				ЗаполнитьЗначенияСвойств(СтрокаТовара, Товар);
				СтрокаТовара.Количество = 1;
				СтрокаТовара.КоличествоУпаковок = 1;   
				
				// Вид цены товара
				СтрокаТовара.ВидЦены = ВидЦеныСтрокиДокумента(Корзина, СтрокаТовара.Номенклатура);
				
				// Расчет цен по соглашению
				ПересчетЦенВСтроке = ПересчитатьЦеныВСтроке(Корзина, СтрокаТовара); 
				Если Не ПересчетЦенВСтроке.Результат Тогда   
					Возврат ПересчетЦенВСтроке;
				КонецЕсли;                     
				
			КонецЕсли;                
			
			Корзина.СуммаДокумента = Корзина.Товары.Итог("Сумма");
			
			Возврат Новый Структура("Результат, ТипШтрихкода, Корзина, СтрокаТовара, Сообщение", Истина, "Товар", Корзина, СтрокаТовара, "");
		Иначе 
			Возврат Новый Структура("Результат, ТипШтрихкода, Корзина, Сообщение", Ложь, "", Корзина, "Корзина для добавления товара не определена");
		КонецЕсли;
		
	Исключение 
		Возврат Новый Структура("Результат, ТипШтрихкода, Корзина, Сообщение", Ложь, "", Корзина, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецФункции  

Функция ПолучитьДокумент(Корзина, Штрихкод)		
	
	Попытка  
		Если Корзина <> Неопределено Тогда       
			
			// Если повторное сканирование того же документа по QR коду или штрихкоду, то вернуть текущею козину
			Если Корзина.Штрихкод = Штрихкод Или Корзина.QRКод = Штрихкод Тогда
				Возврат Новый Структура("Результат, ТипШтрихкода, Корзина, Сообщение", Истина, "Документ", Корзина, "");	    
			КонецЕсли;
			
			ДокументСсылка = Неопределено;
			МассивСсылок = ПолучитьДокументПоштрихкоду(Штрихкод);	    
			
			// Документ найден по штрихкоду
			Если МассивСсылок.Количество() > 0 Тогда 
				ДокументСсылка = МассивСсылок[0]; 
				
				Корзина.Штрихкод = Штрихкод;
				Корзина.QRКод = ГенерацияШтрихкода.СформироватьQRКод(ДокументСсылка);
			Иначе 
				// Документ найден по QR ккоду
				ДокументСсылка = ПолучитьДокументПоQRкоду(Штрихкод);
				
				Если ЗначениеЗаполнено(ДокументСсылка) Тогда     
					Корзина.QRКод = Штрихкод;
					Корзина.Штрихкод = ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(ДокументСсылка);
				Иначе
					Возврат Новый Структура("Результат, ТипШтрихкода, Корзина, Сообщение", Ложь, "", Корзина, "По штрихкоду " + Штрихкод + " информация не найдена. Попробуйте отсканировать другой штрихкод.");						
				КонецЕсли;
			КонецЕсли;		
			
			ДокументПродажи = ПолучитьДокументПоСсылке(ДокументСсылка);  
			Корзина.ТипПродажи = ПолучитьТипПродажи(ДокументСсылка);              
			
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМ") И ДокументПродажи.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Отложен") Тогда
				Возврат Новый Структура("Результат, ТипШтрихкода, Корзина, Сообщение", Ложь, "", Корзина, 
					Строка(ДокументСсылка) + " " + 
					?(ДокументПродажи.Партнер <> ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель"), "покупателя: " + Строка(ДокументПродажи.Партнер) + " ", "") +
					"на сумму " + Формат(ДокументПродажи.СуммаДокумента, "ЧДЦ=2") + " руб должен быть отложен с резервированием, а он в статусе: " + НРег(Строка(ДокументПродажи.Статус)));	    
			КонецЕсли;     				
			
			
			Если Не ДокументПродажи.Проведен Или Корзина.ТипПродажи = -1 Тогда
				Возврат Новый Структура("Результат, ТипШтрихкода, Корзина, Сообщение", Ложь, "", Корзина, 
					Строка(ДокументСсылка) + " " + 
					?(ДокументПродажи.Партнер <> ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель"), "покупателя: " + Строка(ДокументПродажи.Партнер) + " ", "") +
					"на сумму " + Формат(ДокументПродажи.СуммаДокумента, "ЧДЦ=2") + " руб должен быть проведен и не оплачен");	    
			КонецЕсли;     				
			
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМ") Тогда  
				
				Корзина.ЧекККМ = ДокументСсылка;      
				ЗаполнитьЗначенияСвойств(Корзина, ДокументПродажи, "Партнер, Соглашение, ВидЦены, СуммаДокумента, КОплатеБаллами, ЗаказНаДоставку");
				
			ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				
				Корзина.Реализация = ДокументСсылка; 
				ЗаполнитьЗначенияСвойств(Корзина, ДокументПродажи, "Партнер, Соглашение, СуммаДокумента, КОплатеБаллами, ЗаказНаДоставку");
				
				ЗаказСРеализацией = ЗаказСРеализацией(ДокументСсылка);	
				Корзина.ЗаказСРеализацией = ЗаказСРеализацией.Результат;  
				Если Корзина.ЗаказСРеализацией Тогда
					Корзина.ЗаказКлиента = ЗаказСРеализацией.ЗаказКлиента;
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				
				Корзина.ЗаказКлиента = ДокументСсылка; 
				ЗаполнитьЗначенияСвойств(Корзина, ДокументПродажи, "Партнер, Соглашение, СуммаДокумента, КОплатеБаллами, ЗаказНаДоставку");
				
				ЗаказСРеализацией = ЗаказСРеализацией(ДокументСсылка);	
				Корзина.ЗаказСРеализацией = ЗаказСРеализацией.Результат;
				Если Корзина.ЗаказСРеализацией Тогда
					Корзина.Реализация = ЗаказСРеализацией.Реализация;
				КонецЕсли;
				
			КонецЕсли;
			
			Покупатель = ПолучитьПокупателяПоСсылке(Корзина.Партнер);
			Корзина.КартаЛояльности = ?( Покупатель.Свойство("Карта"), Покупатель.Карта, ПредопределенноеЗначение("Справочник.КартыЛояльности.ПустаяСсылка"));
			Корзина.НомерКарты = Покупатель.Штрихкод;
			Корзина.НомерТелефона = Покупатель.НомерТелефона;
			Корзина.АдресЭП = Покупатель.АдресЭП;       
			Корзина.БонуснаяПрограммаЛояльности = Покупатель.БонуснаяПрограммаЛояльности;
			Корзина.МаксимальныйПроцентОплатыБонусами = Покупатель.МаксимальныйПроцентОплатыБонусами;

			ПолучениеГруппыПартнера = ПолучитьГруппуПартнера(Корзина.Партнер);		
			Корзина.ГруппаПартнера = ПолучениеГруппыПартнера.ГруппаПартнера; 
			Корзина.УчастиеВБонуснойПрограмме = ПолучениеГруппыПартнера.УчастиеВБонуснойПрограмме; 
			Корзина.ЭтоБригадир = ПолучениеГруппыПартнера.ЭтоБригадир; 
			
			Корзина.Товары.Загрузить(ПолучитьВесЦеныТовара(ДокументПродажи.Подразделение, ДокументПродажи.Валюта, , ДокументСсылка));
			
			// Пересчет всех баллов
			ЗаполнитьЗначенияСвойств(Корзина, 
				РасчетБонусныхБаллов(Новый Структура("ДокументПродажи, БонуснаяПрограммаЛояльности, МаксимальныйПроцентОплатыБонусами, ЭтоБригадир, БаллыПартнераРассчитаны, БаллыПартнера", 
					Корзина, Корзина.БонуснаяПрограммаЛояльности, Корзина.МаксимальныйПроцентОплатыБонусами, Корзина.ЭтоБригадир, Ложь, 0)));
					
			Возврат Новый Структура("Результат, ТипШтрихкода, Корзина, Сообщение", Истина, "Документ", Корзина, "");	    
			
		Иначе 
			Возврат Новый Структура("Результат, ТипШтрихкода, Корзина, Сообщение", Ложь, "", Корзина, "Корзина для получения документа не определена");
		КонецЕсли;
		
	Исключение 
		Возврат Новый Структура("Результат, ТипШтрихкода, Корзина, Сообщение", Ложь, "", Корзина, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецФункции

Функция УдалитьТоварИзКорзины(Корзина, Штрихкод)
	
	Попытка  
		Если Корзина <> Неопределено Тогда
			
			Отбор = Новый Структура("Штрихкод", Штрихкод);
			НайденныеТовары = Корзина.Товары.НайтиСтроки(Отбор);  
			
			Если НайденныеТовары.Количество() > 0 Тогда
				
				СтрокаТовара =  НайденныеТовары[0];      
				Корзина.Товары.Удалить(СтрокаТовара);
				
			Иначе     
				Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, "Штрихкод " + Штрихкод + " в текущей покупке не найден");	
			КонецЕсли;                
			
			Корзина.СуммаДокумента = Корзина.Товары.Итог("Сумма");
			
			Возврат Новый Структура("Результат, ТипШтрихкода, Корзина, СтрокаТовара, Сообщение", Истина, "Товар", Корзина, СтрокаТовара, "");
		Иначе 
			Возврат Новый Структура("Результат, ТипШтрихкода, Корзина, Сообщение", Ложь, "", Корзина, "Корзина для добавления товара не определена");
		КонецЕсли;
		
	Исключение 
		Возврат Новый Структура("Результат, ТипШтрихкода, Корзина, Сообщение", Ложь, "", Корзина, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецФункции

Функция ПолучитьВерсиюКорзины(Корзина)
	
	Версия = Новый Структура("Сборка, МажорныйНомер, МинорныйНомер, Патч", "0.0.0", 0, 0, 0);
	
	Релиз = Корзина.Версия;
	Если Релиз <> "" Тогда
		
		// Мажорный номер
		МажорныйИндекс = СтрНайти(Релиз, ".");                                      
		МажорныйИндекс = ?(МажорныйИндекс > 0, МажорныйИндекс, СтрНайти(Релиз, " "));
		МажорныйИндекс = ?(МажорныйИндекс > 0, МажорныйИндекс, СтрДлина(Релиз) + 1);
		Если МажорныйИндекс > 0 Тогда
			Попытка                                            
				Номер = Лев(Релиз, МажорныйИндекс - 1);
				Версия.МажорныйНомер = Число(Номер);
				Версия.Сборка = Номер;
			Исключение  
				Возврат Версия;
			КонецПопытки
		КонецЕсли;     
		
		// Минорный номер                      
		Если СтрДлина(Релиз) > МажорныйИндекс Тогда   
			Релиз = Сред(Релиз, МажорныйИндекс + 1);
			МинорныйИндекс = СтрНайти(Релиз, ".");                                      
			МинорныйИндекс = ?(МинорныйИндекс > 0, МинорныйИндекс, СтрНайти(Релиз, " "));
			МинорныйИндекс = ?(МинорныйИндекс > 0, МинорныйИндекс, СтрДлина(Релиз) + 1);
			Если МинорныйИндекс > 0 Тогда
				Попытка                                            
					Номер = Лев(Релиз, МинорныйИндекс - 1);
					Версия.МинорныйНомер = Число(Номер);
					Версия.Сборка = Версия.Сборка + "." + Номер;
				Исключение  
					Возврат Версия;
				КонецПопытки
			КонецЕсли;  
		Иначе
			Возврат Версия;	
		КонецЕсли;
		
		// Патч      
		Если СтрДлина(Релиз) > МинорныйИндекс Тогда
			Релиз = Сред(Релиз, МинорныйИндекс + 1);
			ПатчИндекс = СтрНайти(Релиз, ".");                              
			ПатчИндекс = ?(ПатчИндекс > 0, ПатчИндекс, СтрНайти(Релиз, " "));
			ПатчИндекс = ?(ПатчИндекс > 0, ПатчИндекс, СтрДлина(Релиз) + 1);
			Если ПатчИндекс > 0 Тогда
				Попытка                                            
					Номер = Лев(Релиз, ПатчИндекс - 1);
					Версия.Патч = Число(Номер);
					Версия.Сборка = Версия.Сборка + "." + Номер;
				Исключение  
					Возврат Версия;
				КонецПопытки
			КонецЕсли;
		КонецЕсли;
	КонецЕСли;	
	
	Возврат Версия;
	
КонецФункции

#КонецОбласти   

#Область ЧекСамообслуживания

Функция ЗаписатьЧекСоСкидками(Корзина)

	Попытка
		// Проверка на уже существующую оплату и невозможность оплаты заказа с реализациями
		ВозможностьОплаты = ВозможностьОплаты(Корзина);
		Если Не ВозможностьОплаты.Результат Тогда 
			Если ВозможностьОплаты.ЕстьИзменения Тогда 
				ЗаписьКорзины = ЗаписатьКорзину(Корзина);
			КонецЕсли;
			
			Возврат ВозможностьОплаты;
		КонецЕсли;
		
		Чек = Документы.ЧекСамообслуживания.СоздатьДокумент();  
		ЗаполнитьЗначенияСвойств(Чек, Корзина, , "Номер");
		Чек.Дата = ТекущаяДата(); 
		Чек.Менеджер = Корзина.Кассир; 
		Чек.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Отложен");    
		Чек.МестоОплаты = ПредопределенноеЗначение("Перечисление.МестоОплаты.КСО");
		
		Для Каждого СтрокаКорзины Из Корзина.Товары Цикл
			СтрокаЧека = Чек.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЧека, СтрокаКорзины);  
			СтрокаЧека.Склад = Корзина.Склад;
			СтрокаЧека.Продавец = Корзина.Кассир;  
		КонецЦикла;    		
		
		// Рассчитывать скидки и акции только для продажи на КСО, при сканировании документов - уже рассчитаны
		Если Корзина.ТипПродажи = 0 Тогда
			Попытка 
				РассчитатьСкидкиНаценки(Чек);   
				Справочники.МаркетинговыеМероприятия.РасчетПоМаркетинговымМероприятиям(Чек);
			Исключение
			КонецПопытки;                
		КонецЕсли;   
		
		Чек.ДоступныеБаллы = РасчетБонусныхБаллов(Новый Структура("ДокументПродажи, БонуснаяПрограммаЛояльности, МаксимальныйПроцентОплатыБонусами, ЭтоБригадир, БаллыПартнераРассчитаны, БаллыПартнера", 
						Чек, Корзина.БонуснаяПрограммаЛояльности, Корзина.МаксимальныйПроцентОплатыБонусами, Корзина.ЭтоБригадир, Ложь, Корзина.БаллыПартнера)).ДоступныеБаллы;     
						
		Чек.Записать();    
		
		Возврат Новый Структура("Результат, Чек, Корзина, Сообщение", Истина, Чек, Корзина, "");
	Исключение	       
		Возврат Новый Структура("Результат, Чек, Корзина, Сообщение", Ложь, Чек, Корзина, "Не записан чек текущей покупки: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;  
	
КонецФункции

Функция ЗаписатьЧекСОплатой(ПараметрыВходногоЗапроса, ДанныеЗапроса, Чек)  
	
	Попытка        
		Чек.ИдентификаторТранзакции = ДанныеЗапроса.ИдентификаторТранзакции;   
		
		// Рассчитать баллы для продажи на КСО или по выписанным документам при не таких баллах как в документе
		Если Чек.ТипПродажи = 0 Или 
				(Чек.ТипПродажи <> 0 И ДанныеЗапроса.КОплатеБаллами <> Чек.КОплатеБаллами) Тогда
				
				// Для реализации и заказа нужны дополнительные реквизиты для пересчета строк
				Если Чек.ТипПродажи = 20 Или Чек.ТипПродажи = 30 Тогда            
					
					Чек.ВернутьМногооборотнуюТару = ?(Чек.ТипПродажи = 20, Чек.Реализация.ВернутьМногооборотнуюТару, Чек.ЗаказКлиента.ВернутьМногооборотнуюТару);
					
					Если Чек.ТипПродажи = 20 Тогда        
						
						Чек.РеализацияПоЗаказам = Чек.Реализация.РеализацияПоЗаказам;
						Чек.ТребуетсяЗалогЗаТару = Чек.Реализация.ТребуетсяЗалогЗаТару;   
						
					КонецЕсли;
				КонецЕсли;
						
	                                                                       
			Чек.КОплатеБаллами = Число(ДанныеЗапроса.КОплатеБаллами);	
			Если Число(ДанныеЗапроса.КОплатеБаллами) > 0 Тогда
				Чек.ОплатаБаллами = Истина;
				Чек.ИспользоватьОплатуБонуснымиБаллами = Истина;
				Чек.СуммаОплатыБаллами = Число(ДанныеЗапроса.КОплатеБаллами);
			КонецЕсли;
			
			Для Каждого Товар Из Чек.Товары Цикл
				Товар.СуммаБонусныхБалловКСписанию = 0;
				Товар.СуммаБонусныхБалловКСписаниюВВалюте = 0;
				Товар.СуммаНачисленныхБонусныхБалловВВалюте = 0;
				
				ПересчитатьСуммыСУчетомБонусов(Чек, Товар);
			КонецЦикла;  
			
			БонусыАльтерра.РаспределитьОплатуБаллами(ДанныеЗапроса.КОплатеБаллами, Чек.Товары);   	
			
			Для Каждого Товар Из Чек.Товары Цикл
				ПересчитатьСуммыСУчетомБонусов(Чек, Товар);
			КонецЦикла; 
			Чек.СуммаДокумента = Чек.Товары.Итог("СуммаСНДС");     
			
			БонусыАльтерра.НачислитьБонусныеБаллы(Чек);
			Чек.НачисленныеБаллы = Чек.Товары.Итог("СуммаНачисленныхБонусныхБалловВВалюте");    
			
		КонецЕсли;
		
		Если Чек.ТипПродажи <> 0 Тогда                                      
			Чек.ТипПродажи = Чек.ТипПродажи + 1;
			Чек.ОшибкаЗаписиДокумента = "Документ не записан после оплаты";
		КонецЕсли;
		
		// Фиксирование оплаты картой           
		Чек.ОплатаПлатежнымиКартами.Очистить();
		СтрокаОплатыКартой = Чек.ОплатаПлатежнымиКартами.Добавить();
		СтрокаОплатыКартой.ЭквайринговыйТерминал = ДанныеЗапроса.ТерминалСсылка;
		СтрокаОплатыКартой.НомерПлатежнойКарты   = ДанныеЗапроса.НомерПлатежнойКарты; 
		СтрокаОплатыКартой.Сумма                 = Чек.СуммаДокумента;
		СтрокаОплатыКартой.СсылочныйНомер        = ДанныеЗапроса.СсылочныйНомер;
		СтрокаОплатыКартой.КодАвторизации        = ДанныеЗапроса.КодАвторизации;
		СтрокаОплатыКартой.НомерЧекаЭТ           = ДанныеЗапроса.НомерЧекаЭТ;                                   
		Если ДанныеЗапроса.СсылочныйНомер <> "0" Тогда
			СтрокаОплатыКартой.ВидОплаты		 = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.ПлатежнаяКарта");
		Иначе                                                                                                                      
			СтрокаОплатыКартой.ВидОплаты		 = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей");
			СтрокаОплатыКартой.СтатусОплатыСБП	 = ПредопределенноеЗначение("Перечисление.ТипыСтатусовОплатыСБП.Выполнена");
		КонецЕсли;
		
		Чек.Дата = ТекущаяДатаСеанса();
		Чек.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
		Чек.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта");		
		Чек.АдресЭП = ДанныеЗапроса.ПочтаКЛиента;        
		
		// Для возможного повторного пробития
		Чек.Касса = ПараметрыВходногоЗапроса.КассаСамообслуживания;
		Чек.СуммаОплаты = ДанныеЗапроса.СуммаОплаты;
		Чек.ПечататьБумажныйЧек = ДанныеЗапроса.ПечататьБумажныйЧек;
		Чек.МестоРасчетов = "Магазин ""Альтерра""";                  
		АдресРасчетов = Чек.Подразделение.Адрес;	                 
		Чек.АдресРасчетов = ?(ЗначениеЗаполнено(АдресРасчетов), АдресРасчетов, Чек.МестоРасчетов);
	
		ДолжностьКассира = ДолжностьКассира(ПараметрыВходногоЗапроса.Кассир);
		Если ЗначениеЗаполнено(ДолжностьКассира.ФизическоеЛицо) Тогда  
			КассирВЧеке = ДолжностьКассира.ФизическоеЛицо;
			Если ЗначениеЗаполнено(ДолжностьКассира.Должность) Тогда
				КассирВЧеке = КассирВЧеке + " - " + ДолжностьКассира.Должность;
			КонецЕсли;
		Иначе
			КассирВЧеке = "Администратор";
		КонецЕсли; 		
		Чек.КассирВЧеке = КассирВЧеке;
		
		Чек.УИД = Чек.Ссылка.УникальныйИдентификатор();
		Чек.ДатаОтправкиНаПробитие = ТекущаяДата();
		Чек.ОшибкаПробития = "";
		Чек.КоличествоОтправокНаПробитие = 1;
		
		Чек.Записать(); 
	
		Возврат Новый Структура("Результат, Чек, Сообщение", Истина, Чек, "");
	Исключение	       
		Возврат Новый Структура("Результат, Чек, Сообщение", Ложь, Чек, "Не записана оплата текущей покупки: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;  

КонецФункции      

Функция ЗаписатьЧекСамообслуживания(Чек, РеквизитыЧека);
	
	Попытка   	
		ЗаполнитьЗначенияСвойств(Чек, РеквизитыЧека); 
		Чек.Записать();       
		
		Возврат Новый Структура("Результат, Чек, Сообщение", Истина, Чек, "");
	Исключение	       
		Возврат Новый Структура("Результат, Чек, Сообщение", Ложь, Чек, "Не записан " + Строка(Чек.Ссылка) + " " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки; 		
	
КонецФункции

Функция ПолучитьЧек(Документ)     
	
	Попытка     
		Чек = Неопределено;
		
		ПолучениеСсылкиЧека = ПолучитьСсылкуКорзиныПоИдентификатору(Документ, Ложь);   
		Если Не ПолучениеСсылкиЧека.Результат Тогда
			ПолучениеСсылкиЧека.Вставить("Чек", ПолучениеСсылкиЧека.Корзина);
			Возврат ПолучениеСсылкиЧека;  
		КонецЕсли;
			
		ПолучениеЧека = ПолучитьКорзинуПоСсылке(ПолучениеСсылкиЧека.Ссылка);   
		Если Не ПолучениеЧека.Результат Тогда                                
			ПолучениеСсылкиЧека.Вставить("Чек", ПолучениеЧека.Корзина);
			Возврат ПолучениеЧека;
		КонецЕсли;
		
		Чек = ПолучениеЧека.Корзина;   
		Возврат Новый Структура("Результат, Чек, Сообщение", Истина, Чек, "");
		
	Исключение 
		Возврат Новый Структура("Результат, Чек, Сообщение", Ложь, Чек, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецФункции

#КонецОбласти   

#Область Покупатели

Функция ПолучитьПокупателяПоШтрихкоду(Штрихкод)
	
	Запрос = Новый Запрос;
	Запрос.Текст =     
		"ВЫБРАТЬ 
		|	ПЕРВЫЕ 1 
		|	КартыЛояльности.Ссылка КАК Карта, 
		|	КартыЛояльности.Штрихкод,
		|	КартыЛояльности.Партнер,          
		|	ЕСТЬNULL(ПартнерыТелефон.НомерТелефона, &ПустаяСтрока) КАК НомерТелефона, 
		|	ЕСТЬNULL(ПартнерыАдресЭП.АдресЭП, &ПустаяСтрока) КАК АдресЭП,
		|	КартыЛояльности.Статус КАК СтатусКарты,
		|	ВЫБОР 
		|		КОГДА 
		|			КартыЛояльности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКартЛояльности.Действует)
		|		ТОГДА Истина
		|		ИНАЧЕ Ложь
		|	КОНЕЦ КАК КартаАктивна, 
		|	ВЫБОР 
		|		КОГДА 
		|			КартыЛояльности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКартЛояльности.Действует)
		|		ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок,
		|	БонусныеПрограммыЛояльности.Ссылка КАК БонуснаяПрограммаЛояльности,
		|	БонусныеПрограммыЛояльности.МаксимальныйПроцентОплатыБонусами
		|ИЗ 
		|	Справочник.КартыЛояльности КАК КартыЛояльности  
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		Справочник.ВидыКартЛояльности КАК ВидыКартЛояльности 
		|		ПО КартыЛояльности.Владелец = ВидыКартЛояльности.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммыЛояльности КАК БонусныеПрограммыЛояльности 
		|		ПО ВидыКартЛояльности.БонуснаяПрограммаЛояльности = БонусныеПрограммыЛояльности.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыТелефон
		|		ПО КартыЛояльности.Партнер = ПартнерыТелефон.Ссылка
		|		И ПартнерыТелефон.НомерТелефона <> &ПустаяСтрока   
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыАдресЭП
		|		ПО КартыЛояльности.Партнер = ПартнерыАдресЭП.Ссылка
		|		И ПартнерыАдресЭП.АдресЭП <> &ПустаяСтрока
		|ГДЕ 
		|	НЕ КартыЛояльности.ПометкаУдаления 
		|	И КартыЛояльности.Штрихкод = &Штрихкод
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Выборка = Запрос.Выполнить().Выбрать();                                  
	Если Выборка.Следующий() Тогда       
		
		Если Выборка.КартаАктивна Тогда
			Покупатель = Новый Структура("Результат, ТипШтрихкода, Штрихкод, Партнер, НомерТелефона, АдресЭП, Карта, СтатусКарты, КартаАктивна, БонуснаяПрограммаЛояльности, МаксимальныйПроцентОплатыБонусами", 
				Истина, "Карта", Штрихкод, Выборка.Партнер, Выборка.НомерТелефона, Выборка.АдресЭП, Выборка.Карта, Выборка.СтатусКарты, Выборка.КартаАктивна, Выборка.БонуснаяПрограммаЛояльности, Выборка.МаксимальныйПроцентОплатыБонусами);
		Иначе
			Покупатель =  Новый Структура("Результат, ТипШтрихкода, Штрихкод, Сообщение", 
				Ложь, "Карта", Штрихкод,  "Карта " + Штрихкод + " покупателя "  + Строка(Выборка.Партнер) + " аннулирована");   
		КонецЕсли;
	Иначе                                    
		Покупатель = Новый Структура("Результат, ТипШтрихкода, Штрихкод, НомерТелефона, АдресЭП, Сообщение, БонуснаяПрограммаЛояльности, МаксимальныйПроцентОплатыБонусами", Ложь, "", Штрихкод, "", "", "Карта по штрихкоду " + Штрихкод + " не найдена");
	КонецЕсли;
	
	Если Покупатель.Результат И Не ЗначениеЗаполнено(Покупатель.БонуснаяПрограммаЛояльности) Тогда  
		БонуснаяПрограммаАльтерры = ПолучитьБонуснуюПрограммуПоУмолчанию();
		Покупатель.БонуснаяПрограммаЛояльности = БонуснаяПрограммаАльтерры.БонуснаяПрограммаЛояльности; 
		Покупатель.МаксимальныйПроцентОплатыБонусами = БонуснаяПрограммаАльтерры.МаксимальныйПроцентОплатыБонусами;
	КонецЕсли;			

	 Возврат Покупатель;
КонецФункции	     

Функция ПолучитьПокупателяПоНомеруТелефона(НомерТелефона)                        
	
	Запрос = Новый Запрос;
	Запрос.Текст =     
		"ВЫБРАТЬ
		|	Партнеры.Ссылка КАК Партнер,
		|	ПартнерыТелефон.НомерТелефона КАК НомерТелефона, 
		|	ЕСТЬNULL(ПартнерыАдресЭП.АдресЭП, &ПустаяСтрока) КАК АдресЭП,
		|	ЕСТЬNULL(КартыЛояльности.Ссылка, ЗНАЧЕНИЕ(Справочник.КартыЛояльности.ПустаяСсылка))  КАК Карта, 
		|	ЕСТЬNULL(КартыЛояльности.Штрихкод, &ПустаяСтрока) КАК Штрихкод,
		|	БонусныеПрограммыЛояльности.Ссылка КАК БонуснаяПрограммаЛояльности,
		|	БонусныеПрограммыЛояльности.МаксимальныйПроцентОплатыБонусами
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыТелефон
		|		СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
		|			ПО ПартнерыТелефон.Ссылка = Партнеры.Ссылка
		|			И ПартнерыТелефон.НомерТелефона = &НомерТелефона
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыАдресЭП
		|			ПО Партнеры.Ссылка = ПартнерыАдресЭП.Ссылка
		|			И ПартнерыАдресЭП.АдресЭП <> &ПустаяСтрока  
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КартыЛояльности КАК КартыЛояльности 
		|			ПО Партнеры.Ссылка = КартыЛояльности.Партнер 
		|			И НЕ КартыЛояльности.ПометкаУдаления 
		|			И КартыЛояльности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКартЛояльности.Действует)
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			Справочник.ВидыКартЛояльности КАК ВидыКартЛояльности 
		|			ПО КартыЛояльности.Владелец = ВидыКартЛояльности.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммыЛояльности КАК БонусныеПрограммыЛояльности 
		|			ПО ВидыКартЛояльности.БонуснаяПрограммаЛояльности = БонусныеПрограммыЛояльности.Ссылка";
		
		Запрос.УстановитьПараметр("НомерТелефона", НомерТелефона);
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
	                                                                    
		Выборка = Запрос.Выполнить().Выбрать();     
		Если Выборка.Следующий() Тогда       
			
			Покупатель = Новый Структура("Результат, Партнер, НомерТелефона, АдресЭП, Карта, Штрихкод, БонуснаяПрограммаЛояльности, МаксимальныйПроцентОплатыБонусами", 
				Истина, Выборка.Партнер, Выборка.НомерТелефона, Выборка.АдресЭП, Выборка.Карта, Выборка.Штрихкод, Выборка.БонуснаяПрограммаЛояльности, Выборка.МаксимальныйПроцентОплатыБонусами);
		Иначе                                    
			Покупатель = Новый Структура("Результат, НомерТелефона, Сообщение, БонуснаяПрограммаЛояльности, МаксимальныйПроцентОплатыБонусами", Ложь, "НомерТелефона", "Покупатель по номеру телефона " + НомерТелефона + " не найден");
		КонецЕсли;
		
		Если Покупатель.Результат И Не ЗначениеЗаполнено(Покупатель.БонуснаяПрограммаЛояльности) Тогда  
			БонуснаяПрограммаАльтерры = ПолучитьБонуснуюПрограммуПоУмолчанию();
			Покупатель.БонуснаяПрограммаЛояльности = БонуснаяПрограммаАльтерры.БонуснаяПрограммаЛояльности; 
			Покупатель.МаксимальныйПроцентОплатыБонусами = БонуснаяПрограммаАльтерры.МаксимальныйПроцентОплатыБонусами;
		КонецЕсли;			

		 Возврат Покупатель;		
	
КонецФункции	
	 
Функция ПолучитьПокупателяПоСсылке(Ссылка)                        
	
	Запрос = Новый Запрос;
	Запрос.Текст =     
		"ВЫБРАТЬ
		|	Партнеры.Ссылка КАК Партнер,
		|	ПартнерыТелефон.НомерТелефона КАК НомерТелефона, 
		|	ЕСТЬNULL(ПартнерыАдресЭП.АдресЭП, &ПустаяСтрока) КАК АдресЭП,
		|	ЕСТЬNULL(КартыЛояльности.Ссылка, ЗНАЧЕНИЕ(Справочник.КартыЛояльности.ПустаяСсылка))  КАК Карта, 
		|	ЕСТЬNULL(КартыЛояльности.Штрихкод, &ПустаяСтрока) КАК Штрихкод,
		|	БонусныеПрограммыЛояльности.Ссылка КАК БонуснаяПрограммаЛояльности,
		|	БонусныеПрограммыЛояльности.МаксимальныйПроцентОплатыБонусами
		|ИЗ                 
		|	Справочник.Партнеры КАК Партнеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ  Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыТелефон
		|			ПО Партнеры.Ссылка = &Партнер
		|			И Партнеры.Ссылка = ПартнерыТелефон.Ссылка
		|			И ПартнерыТелефон.НомерТелефона <> &ПустаяСтрока  
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыАдресЭП
		|			ПО Партнеры.Ссылка = &Партнер
		|			И Партнеры.Ссылка = ПартнерыАдресЭП.Ссылка
		|			И ПартнерыАдресЭП.АдресЭП <> &ПустаяСтрока  
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КартыЛояльности КАК КартыЛояльности 
		|			ПО Партнеры.Ссылка = КартыЛояльности.Партнер 
		|			И НЕ КартыЛояльности.ПометкаУдаления 
		|			И КартыЛояльности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКартЛояльности.Действует)
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			Справочник.ВидыКартЛояльности КАК ВидыКартЛояльности 
		|			ПО КартыЛояльности.Владелец = ВидыКартЛояльности.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммыЛояльности КАК БонусныеПрограммыЛояльности 
		|			ПО ВидыКартЛояльности.БонуснаяПрограммаЛояльности = БонусныеПрограммыЛояльности.Ссылка
		|ГДЕ Партнеры.Ссылка = &Партнер";
		
		Запрос.УстановитьПараметр("Партнер", Ссылка);
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
	                                                                    
		Выборка = Запрос.Выполнить().Выбрать();     
		Если Выборка.Следующий() Тогда       
			
			Покупатель = Новый Структура("Результат, Партнер, НомерТелефона, АдресЭП, Карта, Штрихкод, БонуснаяПрограммаЛояльности, МаксимальныйПроцентОплатыБонусами", 
				Истина, Выборка.Партнер, Выборка.НомерТелефона, Выборка.АдресЭП, Выборка.Карта, Выборка.Штрихкод, Выборка.БонуснаяПрограммаЛояльности, Выборка.МаксимальныйПроцентОплатыБонусами);
		Иначе                                    
			Покупатель = Новый Структура("Результат, НомерТелефона, Сообщение, БонуснаяПрограммаЛояльности, МаксимальныйПроцентОплатыБонусами", Ложь, "НомерТелефона", "Покупатель не найден");
		КонецЕсли;
		
		Если Покупатель.Результат И Не ЗначениеЗаполнено(Покупатель.БонуснаяПрограммаЛояльности) Тогда  
			БонуснаяПрограммаАльтерры = ПолучитьБонуснуюПрограммуПоУмолчанию();
			Покупатель.БонуснаяПрограммаЛояльности = БонуснаяПрограммаАльтерры.БонуснаяПрограммаЛояльности; 
			Покупатель.МаксимальныйПроцентОплатыБонусами = БонуснаяПрограммаАльтерры.МаксимальныйПроцентОплатыБонусами;
		КонецЕсли;			

		Возврат Покупатель;		
	
КонецФункции	 

Функция ПолучитьГруппуПартнера(Партнер)  
	
	ГруппаПартнера = ПредопределенноеЗначение("Справочник.ЗначенияСвойствОбъектов.ПустаяСсылка");
	
	Запрос = Новый Запрос; 
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	СвойстваОбъектов.Ссылка КАК ГруппаПартнера,
		|	ВЫБОР 
		|		КОГДА 
		|	    	Партнеры.Код В (&Розница, &РозницаМД) 
		|	    	ИЛИ Партнеры.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.Компания)
		|	    	ИЛИ НЕ СвойстваОбъектов.Наименование В (&ЧастныеЛица, &Бригадиры)
		|	    ТОГДА
		|	     	ЛОЖЬ                                
		|	   	ИНАЧЕ
		|	   		ИСТИНА
		|	КОНЕЦ КАК УчастиеВБонуснойПрограмме,
		|	СвойстваОбъектов.Наименование = &Бригадиры КАК ЭтоБригадир 
		|ИЗ                      
		|	Справочник.Партнеры КАК Партнеры
		|	СОЕДИНЕНИЕ 
		|		Справочник.Партнеры.ДополнительныеРеквизиты КАК ДопРеквизитыПартнеры
		|		ПО Партнеры.Ссылка = ДопРеквизитыПартнеры.Ссылка
		|		И Партнеры.Ссылка = &Партнер
		|	СОЕДИНЕНИЕ
		|		Справочник.ЗначенияСвойствОбъектов КАК СвойстваОбъектов 
		|		ПО ДопРеквизитыПартнеры.Значение = СвойстваОбъектов.Ссылка 
		|		И ТИПЗНАЧЕНИЯ(ДопРеквизитыПартнеры.Значение) = ТИП(Справочник.ЗначенияСвойствОбъектов)  
		|	СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДопРеквизиты      
		|		ПО ДопРеквизиты.Ссылка = СвойстваОбъектов.Владелец
		|		И ДопРеквизиты.Имя = &ИмяГруппыПартнеров";	
	
	Запрос.УстановитьПараметр("Партнер", Партнер); 
	Запрос.УстановитьПараметр("ИмяГруппыПартнеров", "ГруппыПартнеров");
	Запрос.УстановитьПараметр("Розница", "УТ-00000002"); 
	Запрос.УстановитьПараметр("РозницаМД", "А9764"); 
	Запрос.УстановитьПараметр("ЧастныеЛица", "Частные лица"); 
	Запрос.УстановитьПараметр("Бригадиры", "Бригадиры"); 
	
	ГруппаУчастиеПартнера = Новый Структура("ГруппаПартнера, УчастиеВБонуснойПрограмме, ЭтоБригадир", ПредопределенноеЗначение("Справочник.ЗначенияСвойствОбъектов.ПустаяСсылка"), Ложь, Ложь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ГруппаУчастиеПартнера, Выборка);
	КонецЕсли;
	
	Возврат ГруппаУчастиеПартнера;
	
КонецФункции        

Функция СоздатьПокупателя(Данные)
	
	Наименование = СокрЛП(Данные.Фамилия + " " + Данные.Имя + " " + Данные.Отчество);
	
	НачатьТранзакцию();
	
	Попытка
		Партнер = Справочники.Партнеры.СоздатьЭлемент();
		Партнер.Наименование = Наименование;
		Партнер.НаименованиеПолное = Наименование;
		Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		Партнер.Комментарий = "Покупатель добавлен на кассе самообслуживания";
		Партнер.Клиент = Истина;
		Партнер.ДатаРегистрации = ТекущаяДатаСеанса();
		Партнер.БонуснаяПрограммаАктивна = Истина;  
		Партнер.ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail");
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
			Партнер, Данные.НомерТелефона, Справочники.ВидыКонтактнойИнформации.ТелефонПартнера,, Истина);		
		
		ГруппаДоступа = Партнер.ДополнительныеРеквизиты.Добавить();
		ГруппаДоступа.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Группы партнеров");
		ГруппаДоступа.Значение = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию("Частные лица");
		
		Партнер.Записать();
		
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.Наименование = Партнер.Наименование;
		Контрагент.НаименованиеПолное = Партнер.Наименование;
		Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		Контрагент.Партнер = Партнер.Ссылка;
		Контрагент.Записать();
                  
		СегментБонусныеКарты = Справочники.СегментыПартнеров.НайтиПоНаименованию("Бонусные карты"); 
		Если ЗначениеЗаполнено(СегментБонусныеКарты) Тогда
			МенеджерЗаписи = РегистрыСведений.ПартнерыСегмента.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Сегмент = СегментБонусныеКарты;
			МенеджерЗаписи.Партнер = Партнер.Ссылка;
			МенеджерЗаписи.Записать();		
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение      
		ОтменитьТранзакцию();
		
		Возврат Новый Структура	("Результат, Сообщение", Ложь, "Не удалось добавить " + Наименование + " с номером " + Данные.НомерТелефона);
	КонецПопытки;
	
	Покупатель = Новый Структура("Результат, Партнер, НомерТелефона, АдресЭП, Карта, Штрихкод, БонуснаяПрограммаЛояльности, МаксимальныйПроцентОплатыБонусами, Сообщение",  
		Истина, Партнер.Ссылка, Данные.НомерТелефона, "", ПредопределенноеЗначение("Справочник.КартыЛояльности.ПустаяСсылка"), "", Неопределено, Неопределено, "");

	БонуснаяПрограммаАльтерры = ПолучитьБонуснуюПрограммуПоУмолчанию();
	Покупатель.БонуснаяПрограммаЛояльности = БонуснаяПрограммаАльтерры.БонуснаяПрограммаЛояльности; 
	Покупатель.МаксимальныйПроцентОплатыБонусами = БонуснаяПрограммаАльтерры.МаксимальныйПроцентОплатыБонусами;

	Возврат Покупатель;		
	
КонецФункции

Функция РасчетБонусныхБаллов(ПараметрыРасчета) 	
	
	РасчетБаллов = Новый Структура("БаллыПартнера, ДоступныеБаллы", 0, 0);
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.БонуснаяПрограммаЛояльности) И ПараметрыРасчета.ДокументПродажи.Партнер <> ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель") Тогда    
		
		Если Не ПараметрыРасчета.БаллыПартнераРассчитаны Тогда  
			
			Запрос = Новый Запрос;
			Запрос.Текст =                                                                 
				"ВЫБРАТЬ
				|	БонусныеБаллыОстатки.Партнер КАК Партнер,
				|	БонусныеБаллыОстатки.НачисленоОстаток -  БонусныеБаллыОстатки.ВРезервеОстаток КАК ДоступныеБаллыПартнера
				|ИЗ
				|	РегистрНакопления.БонусныеБаллы.Остатки(
				|		&Период,
				|		Партнер = &Партнер
				|		И БонуснаяПрограммаЛояльности = &БонуснаяПрограммаЛояльности) КАК БонусныеБаллыОстатки";
			
			Запрос.УстановитьПараметр("Период", ТекущаяДата());
			Запрос.УстановитьПараметр("БонуснаяПрограммаЛояльности", ПараметрыРасчета.БонуснаяПрограммаЛояльности);
			Запрос.УстановитьПараметр("Партнер", ПараметрыРасчета.ДокументПродажи.Партнер);
			
	    	Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				РасчетБаллов.БаллыПартнера = Выборка.ДоступныеБаллыПартнера;    
				
				РасчетБаллов.БаллыПартнера = РасчетБаллов.БаллыПартнера - ПолучитьНеобработанныеБонусныеБаллы(ПараметрыРасчета.ДокументПродажи.Партнер);
			КонецЕсли;     
			
		Иначе
			РасчетБаллов.БаллыПартнера = ПараметрыРасчета.БаллыПартнера;
		КонецЕсли;
		
		ТЗТоварыКОплате = БонусыАльтерра.ПолучитьТоварыКрасчетуБаллов(ПараметрыРасчета.ДокументПродажи.Товары, Ложь, ТекущаяДата(), Истина);
		СуммаКОплатеПоТоварам = ТЗТоварыКОплате.Итог("Сумма");
		
		Если ПараметрыРасчета.ЭтоБригадир И ПараметрыРасчета.ДокументПродажи.Соглашение.ВозможностьСписатьБаллы = Ложь Тогда	
			РасчетБаллов.ДоступныеБаллы = 0; 
			
		Иначе   
			// Для продажи полностью на КСО целые баллы
			Если ПараметрыРасчета.ДокументПродажи.ТипПродажи = 0 Тогда 
				
				РасчетБаллов.ДоступныеБаллы = Мин(Цел(СуммаКОплатеПоТоварам*ПараметрыРасчета.МаксимальныйПроцентОплатыБонусами / 100), Цел(РасчетБаллов.БаллыПартнера));
				
			// Для выписанных документов разрешены в т.ч. нецелые баллы      
		Иначе                
			
				// Учесть резервирование баллов по неоплаченному заказу или оплаченному но без реализаций
				Если ПараметрыРасчета.ДокументПродажи.ТипПродажи = 30 
					Или (ПараметрыРасчета.ДокументПродажи.ТипПродажи = 31 И Не ПараметрыРасчета.ДокументПродажи.ЗаказСРеализацией) Тогда

					РасчетБаллов.БаллыПартнера = РасчетБаллов.БаллыПартнера + ПараметрыРасчета.ДокументПродажи.КОплатеБаллами;
				КонецЕсли; 	
				
				// Для реализации по заказу можно списать только изначально указанное количество баллов
				Если ПараметрыРасчета.ДокументПродажи.ТипПродажи = 20 И ПараметрыРасчета.ДокументПродажи.ЗаказСРеализацией Тогда
					
					РасчетБаллов.ДоступныеБаллы	= ПараметрыРасчета.ДокументПродажи.КОплатеБаллами;    
						
				// Для остальных случае стандартный расчет баллов	
				Иначе
					РасчетБаллов.ДоступныеБаллы = Мин(Цел(СуммаКОплатеПоТоварам*ПараметрыРасчета.МаксимальныйПроцентОплатыБонусами / 100) + ПараметрыРасчета.ДокументПродажи.КОплатеБаллами, РасчетБаллов.БаллыПартнера);		
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РасчетБаллов;

КонецФункции    

Функция ПолучитьНеобработанныеБонусныеБаллы(Партнер)   
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
		"ВЫБРАТЬ 
		|	СУММА(КОплатеБаллами) КОплатеБаллами
		|ИЗ
		|	Документ.ЧекСамообслуживания       
		|ГДЕ 
		|	Партнер = &Партнер	
		|	И Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|	И (ДатаОтправкиНаПробитие = ДАТАВРЕМЯ(1, 1, 1) 
		|		ИЛИ ДатаРезультатаПробития = ДАТАВРЕМЯ(1, 1, 1) 
		|		ИЛИ (ТипПродажи = 0 И ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка) 
		|			ИЛИ ОшибкаЗаписиДокумента <> &ПустаяСтрока))";     
		
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");

	Выборка = Запрос.Выполнить().Выбрать();                   
	
	Возврат ?(Выборка.Следующий() И ЗначениеЗаполнено(Выборка.КОплатеБаллами), Выборка.КОплатеБаллами, 0) 
		
КонецФункции

Функция ПолучитьБонуснуюПрограммуПоУмолчанию()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
		"ВЫБРАТЬ
		|	Ссылка КАК БонуснаяПрограммаЛояльности, 
		|	МаксимальныйПроцентОплатыБонусами
		|ИЗ
		|  Справочник.БонусныеПрограммыЛояльности
		|ГДЕ                      
		|	Наименование = &БонусыАльтерра";  
	
	Запрос.УстановитьПараметр("БонусыАльтерра", "Бонус от ALTERRA" );

	Выборка = Запрос.Выполнить().Выбрать();
	
	БонуснаяПрограмма = Новый Структура("БонуснаяПрограммаЛояльности, МаксимальныйПроцентОплатыБонусами");
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(БонуснаяПрограмма, Выборка);
	КонецЕсли;
		
	Возврат БонуснаяПрограмма;
	
КонецФункции	

Функция ОтправитьSMS(НомерТелефона, Код)				
	
	НомераТелефонов = Новый Массив;
	НомераТелефонов.Добавить("+7"+НомерТелефона);
	ТекстСообщения =  СтрЗаменить(Код, Символы.НПП, "") + " код подтверждения на tg-alterra.ru";
	
	РезультатОтправки = ОтправкаSMS.ОтправитьSMS(НомераТелефонов,ТекстСообщения,,);
	
	СтруктураОтвета = Новый Структура("ИД,Статус","","");

	Если Не ПустаяСтрока(РезультатОтправки.ОписаниеОшибки) Тогда 
		СтруктураОтвета.Статус = "Ошибка отправки sms: " + РезультатОтправки.ОписаниеОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	Если РезультатОтправки.ОтправленныеСообщения.Количество() > 0 Тогда
		ИдентификаторСообщения = РезультатОтправки.ОтправленныеСообщения[0].ИдентификаторСообщения;
		СтатусДоставкиСообщения = ОтправкаSMS.СтатусДоставки(ИдентификаторСообщения);
		
		СтруктураОтвета.ИД = ИдентификаторСообщения;
		СтруктураОтвета.Статус  = СтатусДоставкиСообщения;
		Возврат СтруктураОтвета;
	Иначе
		СтруктураОтвета.Статус = "Ошибка отправки sms: " + РезультатОтправки.ОписаниеОшибки;
		Возврат СтруктураОтвета; 
	КонецЕсли;
	
КонецФункции

Функция ГруппыПартнеров()
	
	Запрос = Новый Запрос; 
	Запрос.Текст = "
		|ВЫБРАТЬ 
		|	СвойстваОбъектов.Ссылка,
		|	СвойстваОбъектов.Наименование
		|ИЗ
		|	Справочник.ЗначенияСвойствОбъектов КАК СвойстваОбъектов
		|		СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДопРеквизиты
		|		ПО ДопРеквизиты.Ссылка = СвойстваОбъектов.Владелец
		|		И ДопРеквизиты.Имя = &ГруппыПартнеров
		|УПОРЯДОЧИТЬ ПО 	
		|	СвойстваОбъектов.Наименование";  
	
	Запрос.УстановитьПараметр("ГруппыПартнеров", "ГруппыПартнеров");
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ФорматированныйНомерТелефона(Номер)
	
	Если СтрДлина(Номер) <> 10 Тогда
		Возврат Номер;
	КонецЕсли;                
	
	Возврат "+7 (" + Лев(Номер, 3) + ") " + Сред(Номер, 4, 3) + "-" + Сред(Номер, 7, 2) + "-" + Прав(Номер, 2); 
		
КонецФункции	

#КонецОбласти 

#Область Сотрудники

Функция ПолучитьСотрудника(ПараметрыВходногоЗапроса, Штрихкод)
	
	Если Лев(Штрихкод, 4) = "8888" Тогда // Это сотрудник   
		
		Сотрудник = Справочники.Сотрудники.НайтиПоКоду(Штрихкод);
		
		Если ЗначениеЗаполнено(Сотрудник) Тогда              
			
			ПравоАдминистрирования = ПроверитьПравоАдминистрирования(Сотрудник);
			
			Возврат Новый Структура	("Результат, ТипШтрихкода, Штрихкод, Сотрудник, ПравоАдминистрирования, Сообщение", Истина,  "Сотрудник", Штрихкод, Сотрудник, ПравоАдминистрирования, "");
			
		Иначе	
			Возврат Новый Структура	("Результат, Сообщение", Ложь,  "Сотрудник по штрихкоду " + Штрихкод + " не найден");	
		КонецЕсли;
		
	Иначе // Не сотрудник
		Возврат Новый Структура	("Результат, ТипШтрихкода, Сообщение", Истина,  "", "");
	КонецЕсли;
	
КонецФункции

Функция ПроверитьПравоАдминистрирования(Сотрудник)
	
	ПравоАдминистрирования = Ложь;
	
	РабочийПользователь = Сотрудник.Пользователь;
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(РабочийПользователь.ИдентификаторПользователяИБ);
	
	Если ПользовательИБ <> Неопределено Тогда  
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Или
			ПользовательИБ.Роли.Содержит(Метаданные.Роли.МенеджерТорговогоЗала) Тогда
				ПравоАдминистрирования = Истина
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПравоАдминистрирования;  
	
КонецФункции

Функция ДолжностьКассира(Кассир) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ 
		|	1 КАК Порядок,                 
		|	ФизическоеЛицо.Наименование КАК ФизическоеЛицо,      
		|	Должность.Наименование КАК Должность
		|ИЗ
		|	Справочник.Сотрудники
		|ГДЕ 
		|	Пользователь = &Пользователь      
		|	           
		|ОБЪЕДИНИТЬ 	           
		|ВЫБРАТЬ 
		|	2 КАК Порядок,        
		|	ФизическиеЛица.Наименование КАК ФизическоеЛицо,
		|	Сотрудники.Должность.Наименование КАК Должность 
		|ИЗ      
		|	Справочник.Пользователи КАК Пользователи       
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО Пользователи.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники   
		|		ПО Пользователи.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
		|ГДЕ 
		|	Пользователи.Ссылка = &Пользователь	
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";                  
	
	Запрос.УстановитьПараметр("Пользователь", Кассир);
	Выборка = Запрос.Выполнить().Выбрать();            
	
	ДолжностьКассира = Новый Структура("ФизическоеЛицо, Должность", "", "");
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДолжностьКассира, Выборка);
	КонецЕсли;
		
	Возврат ДолжностьКассира;	  
	
КонецФункции

#КонецОбласти

#Область ТоварЦеныБаллы

Функция ВидЦеныДокумента(Корзина)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	
		"ВЫБРАТЬ 
		|	РАЗЛИЧНЫЕ ВидыЦен.Ссылка КАК Ссылка,
		|	3 КАК ПриоритетВидаЦены 
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|	СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
		|		ПО СоглашенияСКлиентами.ГруппаВидовЦен = ВидыЦен.ГруппаВидовЦен
		|		И ВидыЦен.ФорматПодразделения = &ФорматПодразделения
		|		И ВидыЦен.РегионПрисутствия = &РегионПрисутствия  
		|ГДЕ
		|	СоглашенияСКлиентами.Ссылка = &Соглашение 
		|	
		|ОБЪЕДИНИТЬ 
		|	
		|ВЫБРАТЬ 
		|	РАЗЛИЧНЫЕ ВидыЦенЦеновыеГруппы.Ссылка КАК Ссылка,
		|	2 КАК ПриоритетВидаЦены 
		|ИЗ
		|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦенЦеновыеГруппы
		|		ПО СоглашениеЦеновыеГруппы.ГруппаВидовЦен = ВидыЦенЦеновыеГруппы.ГруппаВидовЦен
		|		И ВидыЦенЦеновыеГруппы.ФорматПодразделения = &ФорматПодразделения
		|		И ВидыЦенЦеновыеГруппы.РегионПрисутствия = &РегионПрисутствия  
		|ГДЕ
		|	СоглашениеЦеновыеГруппы.Ссылка = &Соглашение 
		|	
		|ОБЪЕДИНИТЬ 
		|	
		|ВЫБРАТЬ 
		|	РАЗЛИЧНЫЕ ВидыЦенТовары.Ссылка КАК Ссылка,
		|	1 КАК ПриоритетВидаЦены 
		|ИЗ
		|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦенТовары
		|		ПО СоглашениеТовары.ГруппаВидовЦен = ВидыЦенТовары.ГруппаВидовЦен
		|		И ВидыЦенТовары.ФорматПодразделения = &ФорматПодразделения
		|		И ВидыЦенТовары.РегионПрисутствия = &РегионПрисутствия  
		|ГДЕ
		|	СоглашениеТовары.Ссылка = &Соглашение 
		|УПОРЯДОЧИТЬ ПО 2 УБЫВ";

	Запрос.УстановитьПараметр("РегионПрисутствия", Корзина.Подразделение.РегионПрисутствия);
	Запрос.УстановитьПараметр("Соглашение", Корзина.Соглашение);
	Запрос.УстановитьПараметр("ФорматПодразделения", Корзина.Подразделение.ФорматПодразделения);
	
	Результат = Новый Структура("ВидЦены, ОбщийВидЦены", ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"), Истина);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество() > 0 Тогда
		Результат.ВидЦены = ТЗ[0].Ссылка;
		Результат.ОбщийВидЦены = ТЗ.Количество() = 1;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции    

Функция ВидЦеныСтрокиДокумента(Корзина, Номенклатура) 
	
	// Для каждой строки товара одинаковый вид цены, т.к. в соглашении нет уточнений
	Если Корзина.ОбщийВидЦены Тогда 
		Возврат Корзина.ВидЦены;   
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	РАЗЛИЧНЫЕ ВидыЦенТовары.Ссылка КАК Ссылка,
		|	1 КАК ПриоритетВидаЦены 
		|ИЗ
		|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦенТовары
		|		ПО СоглашениеТовары.ГруппаВидовЦен = ВидыЦенТовары.ГруппаВидовЦен
		|		И ВидыЦенТовары.ФорматПодразделения = &ФорматПодразделения
		|		И ВидыЦенТовары.РегионПрисутствия = &РегионПрисутствия  
		|ГДЕ
		|	СоглашениеТовары.Ссылка = &Соглашение   
		|	И СоглашениеТовары.Номенклатура = &Номенклатура
		|	И СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	  
		|ОБЪЕДИНИТЬ   

		|ВЫБРАТЬ 
		|	РАЗЛИЧНЫЕ ВидыЦенЦеновыеГруппы.Ссылка КАК Ссылка,
		|	2 КАК ПриоритетВидаЦены 
		|ИЗ
		|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦенЦеновыеГруппы
		|		ПО СоглашениеЦеновыеГруппы.ГруппаВидовЦен = ВидыЦенЦеновыеГруппы.ГруппаВидовЦен
		|		И ВидыЦенЦеновыеГруппы.ФорматПодразделения = &ФорматПодразделения
		|		И ВидыЦенЦеновыеГруппы.РегионПрисутствия = &РегионПрисутствия     
		|	СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО СоглашениеЦеновыеГруппы.ЦеноваяГруппа = СправочникНоменклатура.ЦеноваяГруппа     
		|		И СправочникНоменклатура.Ссылка = &Номенклатура
		|ГДЕ
		|	СоглашениеЦеновыеГруппы.Ссылка = &Соглашение 
		|	
		|УПОРЯДОЧИТЬ ПО 2 УБЫВ";

	Запрос.УстановитьПараметр("РегионПрисутствия", Корзина.Подразделение.РегионПрисутствия);
	Запрос.УстановитьПараметр("Соглашение", Корзина.Соглашение);
	Запрос.УстановитьПараметр("ФорматПодразделения", Корзина.Подразделение.ФорматПодразделения);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Если Выборка.Следующий() Тогда
		// Вид цены из уточнения соглаешения
		Возврат Выборка.Ссылка;   
	Иначе         
		// Вид цены из корзина, т.к. для данного товара нет уточнения
		Возврат Корзина.ВидЦены;   
	КонецЕсли;       
	
КонецФункции       

Функция ПолучитьВесЦеныТовара(Подразделение, Валюта, ШтрихКод = Неопределено, ДокументСсылка = Неопределено)  
	
	Запрос = Новый Запрос;   
	
	// Найти номенклатуру по сканированному штрихкоду
	Если Штрихкод <> Неопределено Тогда 
		
		Запрос.Текст =
			"ВЫБРАТЬ 
			|	Штрихкод, 	
			|	Номенклатура, 
			|	Характеристика,
			|	0 КАК Количество, 
			|	0 КАК КоличествоУпаковок,    
			|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
			|	0 КАК Цена,
			|	0 КАК Сумма,
			|	0 КАК СуммаСНДС,
			|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
			|	0 КАК СуммаНДС,
			|	0 КАК ПроцентАвтоматическойСкидки,
			|	0 КАК СуммаАвтоматическойСкидки
			|ПОМЕСТИТЬ
			|	втТовары
			|ИЗ 
			|	РегистрСведений.ШтрихкодыНоменклатуры 
			|ГДЕ   
			|	Штрихкод = &Штрихкод;
			|";  
		
	// Найти товары по сканированному документу    
	Иначе   
	
		Запрос.Текст = 	 
			"ВЫБРАТЬ    
			|	Номенклатура,
			|	Характеристика,
			|	%Штрихкод,
			|	Количество, 
			|	КоличествоУпаковок,
			|	ВидЦены,      			
			|	Цена,      
			|	Сумма,
			|	СуммаСНДС,
			|	СтавкаНДС,
			|	СуммаНДС,
			|	ПроцентАвтоматическойСкидки,
			|	СуммаАвтоматическойСкидки
			|ПОМЕСТИТЬ
			|	втТовары
			|ИЗ
			|	%Документ
			|ГДЕ
			|	Ссылка = &Ссылка
			|	%Отменено;
			|";  
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Штрихкод",	?(ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМ"), "Штрихкод КАК Штрихкод", "&ПустаяСтрока КАК Штрихкод"));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Документ",	?(ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМ"), "Документ.ЧекККМ.Товары", 
												?(ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг"), "Документ.РеализацияТоваровУслуг.Товары", "Документ.ЗаказКлиента.Товары"))); 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Отменено",	?(ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказКлиента"), "И НЕ Отменено", ""));												
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + 	 
		"/////////////////////////////////////////////////	
		|ВЫБРАТЬ 
		|	ЦенаБезКарты КАК ВидЦены,
		|	1 КАК ПорядокВидаЦен
		|ПОМЕСТИТЬ 
		|	втВидыЦен
		|ИЗ 
		|	Справочник.СтруктураПредприятия 
		|ГДЕ 
		|	Ссылка = &Подразделение
        |
		|ОБЪЕДИНИТЬ ВСЕ
        |
		|ВЫБРАТЬ 
		|	ЦенаПоКарте КАК ВидЦены,
		|	2 КАК ПорядокВидаЦен
		|ИЗ 
		|	Справочник.СтруктураПредприятия 
		|ГДЕ 
		|	Ссылка = &Подразделение          
		|;   
		|   
		|/////////////////////////////////////////////////	
		|ВЫБРАТЬ    	
		|	ЦеныНоменклатуры.Номенклатура,
		|	ЦеныНоменклатуры.Характеристика,		
		|	ЦеныНоменклатуры.ВидЦены,
		|	ЦеныНоменклатуры.Цена,
		|	ЦеныНоменклатуры.Валюта,
		|	втВидыЦен.ПорядокВидаЦен
		|ПОМЕСТИТЬ 
		|	втЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата,
		|		(Номенклатура, Характеристика) В
		|			(ВЫБРАТЬ Номенклатура, Характеристика 
		|			ИЗ втТовары)
		|		И Валюта = &Валюта
		|		И ВидЦены В
		|			(ВЫБРАТЬ ВидЦены
		|			ИЗ втВидыЦен)) КАК ЦеныНоменклатуры
		|	СОЕДИНЕНИЕ втВидыЦен 
		|		ПО ЦеныНоменклатуры.ВидЦены = втВидыЦен.ВидЦены
		|;	
		|      
		|/////////////////////////////////////////////////			      
		|ВЫБРАТЬ 
		|	втТовары.Номенклатура КАК Номенклатура,
		|	втТовары.Характеристика, 
		|	втТовары.Штрихкод,      
		|	спрНоменклатура.Код КАК Код,
		|	ВЫБОР 
		|		КОГДА
		|			спрНоменклатура.ВесЗнаменатель <> 0 
		|		ТОГДА
		|			спрНоменклатура.ВесЧислитель/спрНоменклатура.ВесЗнаменатель
		|		ИНАЧЕ 0 
		|	КОНЕЦ КАК Вес,
		|	спрНоменклатура.ВесЕдиницаИзмерения КАК ЕдиницаИзмеренияВеса,
		|	ЦеныНоменклатурыБезКарты.Цена КАК ЦенаБезКарты,
		|	ЦеныНоменклатурыПоКарте.Цена КАК ЦенаПоКарте,
		|	втТовары.Количество, 
		|	втТовары.КоличествоУпаковок,
		|	втТовары.ВидЦены,		
		|	втТовары.Цена,
		|	втТовары.Сумма,
		|	втТовары.СуммаСНДС,
		|	втТовары.СтавкаНДС,
		|	втТовары.СуммаНДС,
		|	втТовары.ПроцентАвтоматическойСкидки,
		|	втТовары.СуммаАвтоматическойСкидки
		|ИЗ втТовары
		|	СОЕДИНЕНИЕ 
		|	Справочник.Номенклатура КАК спрНоменклатура
		|		ПО втТовары.Номенклатура = спрНоменклатура.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|	втЦеныНоменклатуры КАК ЦеныНоменклатурыБезКарты
		|		ПО втТовары.Номенклатура = ЦеныНоменклатурыБезКарты.Номенклатура
		|		И втТовары.Характеристика = ЦеныНоменклатурыБезКарты.Характеристика
		|		И ЦеныНоменклатурыБезКарты.ПорядокВидаЦен = 1
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|	втЦеныНоменклатуры КАК ЦеныНоменклатурыПоКарте
		|		ПО втТовары.Номенклатура = ЦеныНоменклатурыПоКарте.Номенклатура
		|		И втТовары.Характеристика = ЦеныНоменклатурыПоКарте.Характеристика
		|		И ЦеныНоменклатурыПоКарте.ПорядокВидаЦен = 2";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата()); 
	Запрос.УстановитьПараметр("ШтрихКод", ШтрихКод);
	Запрос.УстановитьПараметр("Ссылка", ДокументССылка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Если Штрихкод <> Неопределено Тогда 
		
		// Описание и цены номенклатуры
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда          
			Возврат Новый Структура("Результат, Штрихкод, Номенклатура, Характеристика, Код, Вес, ЕдиницаИзмеренияВеса, ЦенаБезКарты, ЦенаПоКарте", 
				Истина, Штрихкод, Выборка.Номенклатура, Выборка.Характеристика, Выборка.Код, Выборка.Вес, Выборка.ЕдиницаИзмеренияВеса, Выборка.ЦенаБезКарты, Выборка.ЦенаПоКарте);
		Иначе                                    
			Возврат Новый Структура("Результат", Ложь);
		КонецЕсли;
		
	Иначе
		// Товары сканированного документа
		Возврат Запрос.Выполнить().Выгрузить();  
	КонецЕсли;
	
КонецФункции	

Функция ПересчитатьЦеныВСтроке(Корзина, СтрокаТовара = Неопределено)   
	
	СтруктураПересчетаСуммыИЦены = Новый Структура;
	СтруктураПересчетаСуммыИЦены.Вставить("Дата", Корзина.Дата);   
	СтруктураПересчетаСуммыИЦены.Вставить("Организация", Корзина.Организация);
	СтруктураПересчетаСуммыИЦены.Вставить("НалогообложениеНДС", Корзина.НалогообложениеНДС);
	СтруктураПересчетаСуммыИЦены.Вставить("Валюта", Корзина.Валюта);    
	СтруктураПересчетаСуммыИЦены.Вставить("ЦенаВключаетНДС", Корзина.ЦенаВключаетНДС);    
	СтруктураПересчетаСуммыИЦены.Вставить("ВидЦены");

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураПересчетаСуммыИЦены);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Организация, Дата", Корзина.НалогообложениеНДС, Корзина.Организация, Корзина.Дата));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммыИЦены);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммыИЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	
	СтрокаСНулевойЦеной = Неопределено;
	
	Если СтрокаТовара <> Неопределено Тогда  
		СтруктураДействий.ЗаполнитьЦенуПродажи.ВидЦены = СтрокаТовара.ВидЦены;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовара, СтруктураДействий, Неопределено);    
		
		Если СтрокаТовара.Цена = 0 Тогда
			СтрокаСНулевойЦеной = СтрокаТовара;
		КонецЕсли;         
	Иначе      
		
		Для Каждого СтрокаКорзины Из Корзина.Товары Цикл
			СтруктураДействий.ЗаполнитьЦенуПродажи.ВидЦены = СтрокаКорзины.ВидЦены;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаКорзины, СтруктураДействий, Неопределено);
			
			Если СтрокаКорзины.Цена = 0 Тогда       
				СтрокаСНулевойЦеной = СтрокаКорзины; 
				Прервать;   
			КонецЕсли; 
		КонецЦикла;  
	КонецЕсли;
	
	Если СтрокаСНулевойЦеной = Неопределено Тогда                      
		Возврат Новый Структура("Результат, Корзина, Сообщение", Истина, Корзина, "");
	Иначе
		Возврат Новый Структура("Результат, Корзина, Сообщение", Ложь, Корзина, "Цена по виду цены " + Строка(СтрокаСНулевойЦеной.ВидЦены) + " на товар " + Строка(СтрокаСНулевойЦеной.Номенклатура) + " не определена");
	КонецЕсли;
	
КонецФункции    

Функция РассчитатьСкидкиНаценки(Чек)

	Если Не ЗначениеЗаполнено(Чек.Соглашение) Тогда 
		Чек.СкидкиРассчитаны = Ложь;	
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("РеализацияСверхЗаказа",            Истина);
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Чек, СтруктураПараметры);
	Чек.СкидкиРассчитаны = Истина;
	
	Возврат Чек.СкидкиРассчитаны;
КонецФункции

Процедура ПересчитатьСуммыСУчетомБонусов(Объект, ТекущаяСтрока)
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");                              
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами"); 
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));  
	
	
	Если Объект.ТипПродажи = 20 Или Объект.ТипПродажи = 30 Тогда // Реализация Или Заказ

		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);

		Если Объект.ТипПродажи = 20 Тогда
			СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару", Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
			
			СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", Новый Структура("БезВозвратнойТары", "Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки"));


			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", 
				Новый Структура(
					"БезВозвратнойТары,ОтмененоБезВозвратнойТары,Отменено",
					"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки",
					"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки",
					"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки"));
		КонецЕсли;
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти    

#Область ПробитиеЧековПродажи  

Функция ПробитьПродажу(Чек)
	
	ПараметрыАТОЛ = ДопМодульСервер.ЗаполнитьПараметрыАТОЛ(Чек);  
	
	ПробитиеЧека = ДопМодульСервер.ПробитьЧек(ПараметрыАТОЛ, Чек.УИД);  
	
	// Печать пропуска для оплаченных Чека ККМ и Реализации
	Если (Чек.ТипПродажи = 11 Или Чек.ТипПродажи = 21) И Не ЗначениеЗаполнено(Чек.ЗаказНаДоставку) Тогда
		ОтправитьНаПечатьПропуск(ПараметрыАТОЛ, Чек);
	КонецЕсли;
	
	ПробитиеЧека.Вставить("Чек", Чек);
	Возврат ПробитиеЧека;
	
КонецФункции 

Функция ОтправитьНаПечатьПропуск(ПараметрыАТОЛ, Документ)
	
	// Пробить пропуск для выписанных чека ККМ и реализации
	Если Документ.ТипПродажи <> 0 Тогда      
		
		ДанныеПропуска = Новый Структура("Ссылка, УИД, QRКод, Номер, Дата, Склад, СуммаДокумента, КОплатеБаллами, ЗащитныйКод, Секции");   
		
		Если Документ.ТипПродажи = 11 Тогда
			ДанныеПропуска.Ссылка = Документ.ЧекККМ;   
		ИначеЕсли  Документ.ТипПродажи = 21 Тогда
			ДанныеПропуска.Ссылка = Документ.Реализация;      
		КонецЕсли;
	
		ДанныеПропуска.УИД = Строка(Новый УникальныйИдентификатор());     
		ДанныеПропуска.QRКод = Документ.QRКод;            
		ЗаполнитьЗначенияСвойств(ДанныеПропуска, ПолучитьДанныеДокумента(ДанныеПропуска.Ссылка), "Номер, Дата, Склад, ЗащитныйКод");
		ЗаполнитьЗначенияСвойств(ДанныеПропуска, Документ, "СуммаДокумента, КОплатеБаллами");
		ДанныеПропуска.Секции = ПолучитьДанныеПоСекциям(ДанныеПропуска.Ссылка);
		
		ПробитиеПропуска = ДопМодульСервер.ПробитьПропуск(ПараметрыАТОЛ, ДанныеПропуска);     
		
		ПробитиеПропуска.Вставить("Документ", Документ);
		Возврат ПробитиеПропуска;
		
	Иначе
		Возврат Новый Структура("Результат, Документ, Сообщение", Ложь, Документ, "Для печати пропуска документ должен быть оплачен");
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьДанныеДокумента(Ссылка) 
	
	Запрос = Новый Запрос;   
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда 
		
		Запрос.Текст = 	
			"ВЫБРАТЬ
			|	Ссылка,
			|	Номер,
			|	Дата,
			|	Склад,
			|	СуммаДокумента,
			|	КОплатеБаллами,
			|	СТРЗАМЕНИТЬ(СТРЗАМЕНИТЬ(СТРЗАМЕНИТЬ(СТРЗАМЕНИТЬ(Номер + СТРОКА(Дата) + СТРОКА(ДатаСоздания), "":"", """"), ""."", """"), "" "", """"), ""-"", """") КАК ЗащитныйКод	
			|ИЗ	
			|	Документ.ЧекККМ  
			|ГДЕ 
			|	Ссылка = &Ссылка";                                        
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
		
		Запрос.Текст = 	
			"ВЫБРАТЬ
			|	Ссылка,
			|	Номер,
			|	Дата,
			|	Склад,
			|	СуммаДокумента,
			|	СуммаОплатыБаллами КАК КОплатеБаллами,
			|	СТРЗАМЕНИТЬ(СТРЗАМЕНИТЬ(СТРЗАМЕНИТЬ(СТРЗАМЕНИТЬ(Номер + СТРОКА(Дата) + СТРОКА(ДатаОтметкиКасса), "":"", """"), ""."", """"), "" "", """"), ""-"", """") КАК ЗащитныйКод
			|ИЗ	
			|	Документ.РеализацияТоваровУслуг
			|ГДЕ 
			|	Ссылка = &Ссылка";	 
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеДокумента = Новый Структура("Ссылка, Номер, Дата, Склад, СуммаДокумента, КОплатеБаллами");   
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Выборка);
		ДанныеДокумента.Вставить("ЗащитныйКод", Прав(Выборка.ЗащитныйКод, СтрДлина(Выборка.ЗащитныйКод) - 4)); 
	КонецЕсли;
	
	Возврат ДанныеДокумента;
	
КонецФункции	  

Функция ПолучитьДанныеПоСекциям(Ссылка) 
	
	Если Не Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;     
	Запрос.Текст = 
		"ВЫБРАТЬ                                                  
		|	Секция,	
		|	Штрихкод,
		|	Сумма
		|ИЗ
		|	РегистрСведений.ШтрихкодыПоСекциямДокумента 
		|ГДЕ
		|	Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Ссылка);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Секции = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ДанныеСекции = Новый Структура("Секция, Штрихкод, Сумма", Выборка.Секция, Выборка.Штрихкод, Выборка.Сумма);   
		Секции.Добавить(ДанныеСекции)
	КонецЦикла;
	
	Возврат Секции;
	
КонецФункции

Функция ВозможностьОплаты(ДокументСамообслуживания)                
	
	ЕстьИзменения = Ложь;
	
	// Если оплата выписанного не на КСО документа, проверить не был ли он уже оплачен в других местах (асинхронность) 	
	Если ДокументСамообслуживания.ТипПродажи <> 0 И ДокументСамообслуживания.ТипПродажи % 10 = 0 Тогда   
		
		ТипПродажи = ПолучитьТипПродажи(?(ДокументСамообслуживания.ТипПродажи = 10, ДокументСамообслуживания.ЧекККМ, ?(ДокументСамообслуживания.ТипПродажи = 20, ДокументСамообслуживания.Реализация, ДокументСамообслуживания.ЗаказКлиента)));
		Если ДокументСамообслуживания.ТипПродажи <> ТипПродажи Тогда
			ДокументСамообслуживания.ТипПродажи = ТипПродажи;
			ЕстьИзменения = Истина;
		КонецЕсли; 
		
	КонецЕсли;              
	
	Если ДокументСамообслуживания.ТипПродажи % 10 = 1 Тогда 
		Возврат Новый Структура("Результат, Чек, Корзина, ЕстьИзменения, Сообщение", Ложь, ДокументСамообслуживания, ДокументСамообслуживания, ЕстьИзменения, "Документ уже оплачен");
	КонецЕсли;       
	
	// При наличии реализаций оплата заказа клиента невозможна
	Если ДокументСамообслуживания.ТипПродажи = 30 Тогда    
		
		ЗаказСРеализацией = ЗаказСРеализацией(ДокументСамообслуживания.ЗаказКлиента);
		Если ДокументСамообслуживания.ЗаказСРеализацией <> ЗаказСРеализацией.Результат Тогда
			ДокументСамообслуживания.ЗаказСРеализацией = ЗаказСРеализацией.Результат;
			ДокументСамообслуживания.Реализация = ?(ЗаказСРеализацией.Результат, ЗаказСРеализацией.Реализация, ПредопределенноеЗначение("Документ.РеализацияТоваровУслуг.ПустаяСсылка"));
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ДокументСамообслуживания.ЗаказСРеализацией Тогда 
			Возврат Новый Структура("Результат, Чек, Корзина, ЕстьИзменения, Сообщение", Ложь, ДокументСамообслуживания, ДокументСамообслуживания, ЕстьИзменения, "Оплата заказа невозможна при наличии реализаций: " + Строка(ДокументСамообслуживания.Реализация));
		КонецЕсли;			
		
	КонецЕсли;       
	
	Возврат Новый Структура("Результат", Истина);
	
КонецФункции	

#КонецОбласти   

#Область QrКод  

Процедура ЗаписатьQRКодВФоне(ПараметрыВходногоЗапроса, ДокументСсылка, QRКод)
	
	Попытка
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрыВходногоЗапроса.КаталогЛогов);
		МассивПараметров.Добавить(ПараметрыВходногоЗапроса.ИДУстройства);
		МассивПараметров.Добавить(ДокументСсылка);
		МассивПараметров.Добавить(QRКод);

		ФоновыеЗадания.Выполнить("ДопМодульСервер.ЗаписатьQrКод", МассивПараметров);
	Исключение
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ВыписанныеДокументы  

Функция ПолучитьДокументПоШтрихкоду(Штрихкод)	    
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.РеализацияТоваровУслуг.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказКлиента.ПустаяСсылка"));
	
	Возврат ШтрихкодированиеПечатныхФорм.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);	
	
КонецФункции        

Функция ПолучитьДокументПоQRкоду(QRКод)	    
	
	// Чек ККМ или Реализация
	Если Лев(QRКод,4) = "1103" Или Лев(QRКод,4) = "1104" Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Документ КАК Документ
			|ИЗ
			|	РегистрСведений.ШтрихкодыПоСекциямДокумента
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(Документ) В (ТИП(Документ.РеализацияТоваровУслуг), ТИП(Документ.ЧекККМ))
	        |	И QRкод = &QRкод";
			
		Запрос.УстановитьПараметр("QRкод", QRКод);
			
		Выборка = Запрос.Выполнить().Выбрать();	
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Документ; 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДокументПоСсылке(Ссылка)
	
	Запрос = Новый Запрос; 
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
	
		Запрос.Текст =
			"ВЫБРАТЬ   
			|	ДокументПродажи.Проведен,
			|	ДокументПродажи.Статус,
			|	ДокументПродажи.Партнер,
			|	ДокументПродажи.Соглашение,
			|	ДокументПродажи.ВидЦены,
			|	ДокументПродажи.Подразделение,
			|	ДокументПродажи.Валюта,
			|	ДокументПродажи.СуммаДокумента,
			|	ДокументПродажи.КОплатеБаллами,
			|	ЕСТЬNULL(ЗаказНаДоставку.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаказНаДоставкуКлиенту.ПустаяСсылка)) КАК ЗаказНаДоставку
			|ИЗ
			|	Документ.ЧекККМ КАК ДокументПродажи       
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаДоставкуКлиенту.Основания ОснованияДоставки
			|		ПО ДокументПродажи.Ссылка = ОснованияДоставки.Документ 
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаДоставкуКлиенту КАК ЗаказНаДоставку
			|		ПО ОснованияДоставки.Ссылка = ЗаказНаДоставку.Ссылка   
			|		И ЗаказНаДоставку.Проведен
			|ГДЕ                 
			|	ДокументПродажи.Ссылка = &Ссылка";
	
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
		Запрос.Текст =
			"ВЫБРАТЬ    
			|	ДокументПродажи.Проведен,
			|	ДокументПродажи.Партнер,
			|	ДокументПродажи.Соглашение,
			|	ДокументПродажи.Подразделение,
			|	ДокументПродажи.Валюта,
			|	ДокументПродажи.СуммаДокумента,
			|	СУММА(РеализацияТовары.СуммаБонусныхБалловКСписанию)КАК КОплатеБаллами,
			|	ЕСТЬNULL(ЕСТЬNULL(ЗаказНаДоставкуРеализация.Ссылка, ЗаказНаДоставкуЗаказ.Ссылка), ЗНАЧЕНИЕ(Документ.ЗаказНаДоставкуКлиенту.ПустаяСсылка)) КАК ЗаказНаДоставку
			|ИЗ
			|	Документ.РеализацияТоваровУслуг Как ДокументПродажи
			|	СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТовары
			|		ПО ДокументПродажи.Ссылка = РеализацияТовары.Ссылка           
			|		
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаДоставкуКлиенту.Основания КАК ОснованияДоставкиРеализация
			|		ПО ДокументПродажи.Ссылка = ОснованияДоставкиРеализация.Документ 
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаДоставкуКлиенту КАК ЗаказНаДоставкуРеализация
			|		ПО ОснованияДоставкиРеализация.Ссылка = ЗаказНаДоставкуРеализация.Ссылка   
			|		И ЗаказНаДоставкуРеализация.Проведен
			|		                                                                                  
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиентаПоРеализации
			|		ПО ДокументПродажи.ЗаказКлиента = ЗаказКлиентаПоРеализации.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаДоставкуКлиенту.Основания ОснованияДоставкиЗаказ
			|		ПО ЗаказКлиентаПоРеализации.Ссылка = ОснованияДоставкиЗаказ.Документ 
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаДоставкуКлиенту КАК ЗаказНаДоставкуЗаказ
			|		ПО ОснованияДоставкиЗаказ.Ссылка = ЗаказНаДоставкуЗаказ.Ссылка   
			|		И ЗаказНаДоставкуЗаказ.Проведен
			|ГДЕ                 
			|	ДокументПродажи.Ссылка = &Ссылка 
			|СГРУППИРОВАТЬ ПО	      
			|	ДокументПродажи.Проведен,
			|	ДокументПродажи.Партнер,
			|	ДокументПродажи.Соглашение,
			|	ДокументПродажи.Подразделение,
			|	ДокументПродажи.Валюта,
			|	ДокументПродажи.СуммаДокумента,
			|	ЗаказНаДоставкуРеализация.Ссылка,
			|	ЗаказНаДоставкуЗаказ.Ссылка";
			
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда   
		
		Запрос.Текст =
			"ВЫБРАТЬ    
			|	ДокументПродажи.Проведен,
			|	ДокументПродажи.Партнер,
			|	ДокументПродажи.Соглашение,
			|	ДокументПродажи.Подразделение,
			|	ДокументПродажи.Валюта,
			|	ДокументПродажи.СуммаДокумента,
			|	СУММА(ЗаказКлиентаТовары.СуммаБонусныхБалловКСписанию) КАК КОплатеБаллами,
			|	ЕСТЬNULL(ЗаказНаДоставку.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаказНаДоставкуКлиенту.ПустаяСсылка)) КАК ЗаказНаДоставку
			|ИЗ
			|	Документ.ЗаказКлиента Как ДокументПродажи
			|	СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
			|		ПО ДокументПродажи.Ссылка = ЗаказКлиентаТовары.Ссылка     
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаДоставкуКлиенту.Основания ОснованияДоставки
			|		ПО ДокументПродажи.Ссылка = ОснованияДоставки.Документ 
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаДоставкуКлиенту КАК ЗаказНаДоставку
			|		ПО ОснованияДоставки.Ссылка = ЗаказНаДоставку.Ссылка   
			|		И ЗаказНаДоставку.Проведен
			|ГДЕ                 
			|	ДокументПродажи.Ссылка = &Ссылка 
			|СГРУППИРОВАТЬ ПО	      
			|	ДокументПродажи.Проведен,
			|	ДокументПродажи.Партнер,
			|	ДокументПродажи.Соглашение,
			|	ДокументПродажи.Подразделение,
			|	ДокументПродажи.Валюта,
			|	ДокументПродажи.СуммаДокумента,
			|	ЗаказНаДоставку.Ссылка";
			
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);	
	
	ДокументПродажи = Новый Структура("Проведен, Статус, Партнер, Соглашение, ВидЦены, Подразделение, Валюта, СуммаДокумента, КОплатеБаллами, ЗаказНаДоставку");
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДокументПродажи, Выборка);
	КонецЕсли;
	
	Возврат ДокументПродажи;
	
КонецФункции	

Функция ПолучитьТипПродажи(Ссылка)           
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда  
		Запрос.Текст =
			"ВЫБРАТЬ 
			|	ВЫБОР
			|		КОГДА     
			|			ЧекиККМ.Проведен И
			|			ЧекиККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ТоварЗарезервирован) 
			|			И (ЧекиСамообслуживания.Ссылка ЕСТЬ NULL
			|				ИЛИ ЧекиСамообслуживания.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
			|		ТОГДА 10
			|		КОГДА    
			|			ЧекиККМ.Проведен И
			|			(ЧекиККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
			|				ИЛИ (ЧекиККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ТоварЗарезервирован)
			|					И ЧекиСамообслуживания.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)))
			|		ТОГДА 11
			|		ИНАЧЕ -1
			|	КОНЕЦ КАК ТипПродажи
			|ИЗ 
			|	Документ.ЧекККМ КАК ЧекиККМ  
			|	ЛЕВОЕ СОЕДИНЕНИЕ      
			|		(ВЫБРАТЬ ПЕРВЫЕ 1
			|			Ссылка,
			|			Статус,
			|			ЧекККМ
			|		ИЗ 					 
			|			Документ.ЧекСамообслуживания  
			|		ГДЕ 
			|			ЧекККМ = &Ссылка
			|		УПОРЯДОЧИТЬ ПО
			|			ВЫБОР 
			|				КОГДА Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит) ТОГДА 0
			|				ИНАЧЕ 1
			|			КОНЕЦ 
			|		) КАК ЧекиСамообслуживания
			|			
			|			
			|		ПО ЧекиККМ.Ссылка = ЧекиСамообслуживания.ЧекККМ 
			|ГДЕ                     
			|	ЧекиККМ.Ссылка = &Ссылка"; 
			
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда     
		
		Запрос.Текст =
			"ВЫБРАТЬ 
			|	ВЫБОР
			|		КОГДА     
			|			РеализацияТоваровУслуг.Проведен
			|			И РеализацияТоваровУслуг.Кассир = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|			И (ЧекиСамообслуживания.Ссылка ЕСТЬ NULL
			|				ИЛИ ЧекиСамообслуживания.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)) 
			|				  
			|			И ОперацияПоПлатежнойКартеЗаказа.Ссылка ЕСТЬ NULL
			|			И (ЧекиСамообслуживанияЗаказа.Ссылка ЕСТЬ NULL
			|				ИЛИ ЧекиСамообслуживанияЗаказа.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
			|		ТОГДА 20
			|		КОГДА    
			|			РеализацияТоваровУслуг.Проведен И
			|			(РеализацияТоваровУслуг.Кассир <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|				ИЛИ (Реализация.Кассир = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|					И ЧекиСамообслуживания.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
			|				
			|				ИЛИ (ОперацияПоПлатежнойКартеЗаказа.Ссылка ЕСТЬ НЕ NULL)
			|				ИЛИ (ЧекиСамообслуживанияЗаказа.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
			|			)
			|		ТОГДА 21
			|		ИНАЧЕ -1
			|	КОНЕЦ КАК ТипПродажи
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг  
			|	ЛЕВОЕ СОЕДИНЕНИЕ      
			|		(ВЫБРАТЬ ПЕРВЫЕ 1
			|			Ссылка,
			|			Статус,
			|			Реализация
			|		ИЗ 					 
			|			Документ.ЧекСамообслуживания  
			|		ГДЕ 
			|			Реализация = &Ссылка
			|		УПОРЯДОЧИТЬ ПО
			|			ВЫБОР 
			|				КОГДА Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит) ТОГДА 0
			|				ИНАЧЕ 1
			|			КОНЕЦ 
			|		) КАК ЧекиСамообслуживания		
			|		ПО РеализацияТоваровУслуг.Ссылка = ЧекиСамообслуживания.Реализация 
			|                                   
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК Заказ
			|		ПО РеализацияТоваровУслуг.ЗаказКлиента = Заказ.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			|		(ВЫБРАТЬ ПЕРВЫЕ 1
			|			Ссылка,
			|			Статус,
			|			ЗаказКлиента		
			|		ИЗ 					 
			|			Документ.ЧекСамообслуживания  
			|		ГДЕ 
			|			ЗаказКлиента = &Ссылка
			|		УПОРЯДОЧИТЬ ПО
			|			ВЫБОР 
			|				КОГДА Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит) ТОГДА 0
			|				ИНАЧЕ 1
			|			КОНЕЦ 
			|		) КАК ЧекиСамообслуживанияЗаказа		
			|		ПО Заказ.Ссылка = ЧекиСамообслуживанияЗаказа.ЗаказКлиента 
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ОперацияПоПлатежнойКартеЗаказа
			|		ПО ОперацияПоПлатежнойКартеЗаказа.Ссылка.Проведен
			|		И ОперацияПоПлатежнойКартеЗаказа.ОбъектРасчетов.Объект = Заказ.Ссылка
			|		И ОперацияПоПлатежнойКартеЗаказа.ОснованиеПлатежа = Заказ.Ссылка       
			|ГДЕ                     
			|	РеализацияТоваровУслуг.Ссылка = &Ссылка";		

	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда  
		
		Запрос.Текст = 
			"ВЫБРАТЬ 
			|	ВЫБОР
			|		КОГДА     
			|			Заказ.Проведен
			|			И ОперацияПоПлатежнойКарте.Ссылка ЕСТЬ NULL
			|			И (ЧекиСамообслуживания.Ссылка ЕСТЬ NULL
			|				ИЛИ ЧекиСамообслуживания.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
			|		ТОГДА 30
			|		КОГДА    
			|			Заказ.Проведен И
			|			(ОперацияПоПлатежнойКарте.Ссылка ЕСТЬ НЕ NULL
			|				ИЛИ ЧекиСамообслуживания.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
			|		ТОГДА 31
			|		ИНАЧЕ -1
			|	КОНЕЦ КАК ТипПродажи
			|ИЗ
			|	Документ.ЗаказКлиента КАК Заказ
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			|		(ВЫБРАТЬ ПЕРВЫЕ 1
			|			Ссылка,
			|			Статус,
			|			ЗаказКлиента		
			|		ИЗ 					 
			|			Документ.ЧекСамообслуживания  
			|		ГДЕ 
			|			ЗаказКлиента = &Ссылка
			|		УПОРЯДОЧИТЬ ПО
			|			ВЫБОР 
			|				КОГДА Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит) ТОГДА 0
			|				ИНАЧЕ 1
			|			КОНЕЦ 
			|		) КАК ЧекиСамообслуживания		
			|		ПО Заказ.Ссылка = ЧекиСамообслуживания.ЗаказКлиента 
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ОперацияПоПлатежнойКарте
			|		ПО ОперацияПоПлатежнойКарте.Ссылка.Проведен
			|		И ОперацияПоПлатежнойКарте.ОбъектРасчетов.Объект = Заказ.Ссылка
			|		И ОперацияПоПлатежнойКарте.ОснованиеПлатежа = Заказ.Ссылка			
			|ГДЕ                     
			|	Заказ.Ссылка = &Ссылка";		
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ТипПродажи;
	Иначе
		Возврат -1
	КонецЕсли;
	
КонецФункции	

Функция ЗаказСРеализацией(Ссылка);
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда  
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЗаказКлиента, 
			|	Ссылка КАК Реализация
			|ИЗ
			|	Документ.РеализацияТоваровУслуг  
			|ГДЕ       
			|	Ссылка = &Ссылка
			|	И ЗаказКлиента <> Неопределено";   
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда  
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ПЕРВЫЕ 1 
			|	Заказ.Ссылка КАК ЗаказКлиента,
			|	РеализацияТоваровУслуг.Ссылка КАК Реализация
			|ИЗ
			|	Документ.ЗаказКлиента КАК Заказ
			|	СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг 
			|		ПО Заказ.Ссылка = РеализацияТоваровУслуг.ЗаказКлиента
			|ГДЕ 
			|	Заказ.Ссылка = &Ссылка";
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);   
	
	Выборка = Запрос.Выполнить().Выбрать();  
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Результат, ЗаказКлиента, Реализация", Истина, Выборка.ЗаказКлиента, Выборка.Реализация);
	Иначе
    	Возврат Новый Структура("Результат", Ложь);
	КонецЕсли;
	
КонецФункции	

#КонецОбласти 

#Область Кассы

Функция ПолучитьНастройкиРМК()
	
	НастройкиРМК = Новый Структура("Кассир, ПользовательИБ, РабочееМестоСамообслуживания, КассаСамообслуживания, Подразделение, ИДУстройства, АдресХраненияЛогов, ВремяХраненияВДнях, СохранятьПредыдущиеЛоги, КассаККМ, Организация, Склад");
	НастройкиРМК.Кассир = ПараметрыСеанса.ТекущийПользователь;
	НастройкиРМК.ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТь 
		|	РабочиеМеста.Ссылка КАК РабочееМестоСамообслуживания,
		|	СпрКассы.Ссылка КАК КассаСамообслуживания,
		|	СпрКассы.Подразделение КАК Подразделение,          
		|	СпрКассы.ИДУстройства КАК ИДУстройства,		
		|	СпрКассы.АдресХраненияЛогов КАК АдресХраненияЛогов,
		|	СпрКассы.ВремяХраненияВДнях КАК ВремяХраненияВДнях,
		|	СпрКассы.СохранятьПредыдущиеЛоги КАК СохранятьПредыдущиеЛоги,
		|	СпрКассыККМ.Ссылка КАК КассаККМ,
		|	СпрКассыККМ.Владелец КАК Организация,	
		|	СпрКассыККМ.Склад КАК Склад
		|ИЗ 
		|	Справочник.РабочиеМеста КАК РабочиеМеста   
		|	СОЕДИНЕНИЕ Справочник.НастройкиРМК КАК НастройкиРМК
		|		ПО РабочиеМеста.Ссылка = НастройкиРМК.РабочееМесто   
		|		И РабочиеМеста.Наименование ПОДОБНО &ПользовательИБ
		|	СОЕДИНЕНИЕ Справочник.НастройкиРМК.Кассы КАК НастройкиРМККассы
		|		ПО НастройкиРМК.Ссылка = НастройкиРМККассы.Ссылка      
		|	СОЕДИНЕНИЕ Справочник.Кассы КАК СпрКассы
		|		ПО НастройкиРМККассы.Касса = СпрКассы.Ссылка 
		|	СОЕДИНЕНИЕ Справочник.НастройкиРМК.КассыККМ КАК НастройкиРМККассыККМ
		|		ПО НастройкиРМК.Ссылка = НастройкиРМККассыККМ.Ссылка 
		|	СОЕДИНЕНИЕ Справочник.КассыККМ КАК СпрКассыККМ
		|		ПО НастройкиРМККассыККМ.КассаККМ = СпрКассыККМ.Ссылка";  
	
	Запрос.УстановитьПараметр("ПользовательИБ", Строка(НастройкиРМК.ПользовательИБ.Имя) + "%");	  
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(НастройкиРМК, Выборка);
	КонецЕсли;  
	
	КаталогЛогов = "";
	Попытка
		КаталогЛогов = Лев(НастройкиРМК.АдресХраненияЛогов, СтрНайти(НастройкиРМК.АдресХраненияЛогов, "\",  НаправлениеПоиска.СКонца));
	Исключение
	КонецПопытки;	
	
	НастройкиРМК.Вставить("КаталогЛогов", КаталогЛогов);	
	
	Возврат НастройкиРМК; 
	
КонецФункции

#КонецОбласти   

#Область Логи

Процедура ЗаписатьЛог(ПараметрыВходногоЗапроса, ТекстЛогов, Корзина = Неопределено, Чек = Неопределено)
	
	ИмяКаталога = ПараметрыВходногоЗапроса.КаталогЛогов + "selfService\" + ПараметрыВходногоЗапроса.ИДУстройства + "\" + Формат(ТекущаяДата(), "ДФ=ггггММдд"); 
	
	Попытка 
		КаталогЛогов = Новый Файл(ИмяКаталога);
		Если Не КаталогЛогов.Существует() Тогда
			СоздатьКаталог(ИмяКаталога);
		КонецЕсли;   
		
		Имялога = "";    
		ПолучитьИмяЛогаКорзины(ИмяКаталога, ИмяЛога, ПараметрыВходногоЗапроса, Корзина, Чек);   
		ПолучитьИмяЛогаОтдельныеЗапросы(ИмяКаталога, ИмяЛога, ПараметрыВходногоЗапроса, Корзина, Чек);
		ПолучитьИмяЛогаЗаписиЧека(ИмяКаталога, ИмяЛога, ПараметрыВходногоЗапроса, Корзина, Чек); 
		ПолучитьИмяЛогаОплаты(ИмяКаталога, ИмяЛога, ПараметрыВходногоЗапроса, Корзина, Чек); 
		
		ФайлЛогов = Новый ЗаписьТекста(ИмяКаталога + "\" + ИмяЛога, КодировкаТекста.UTF8, , Истина);
		ФайлЛогов.ЗаписатьСтроку(ТекстЛогов);
		ФайлЛогов.Закрыть();

	Исключение
	КонецПопытки;
	
КонецПроцедуры	  

Процедура ПолучитьИмяЛогаКорзины(ИмяКаталога, ИмяЛога, ПараметрыВходногоЗапроса, Корзина, Чек) 
	
	Если 	Не (ПараметрыВходногоЗапроса.ТипЗапроса = "onScan" 
			Или ПараметрыВходногоЗапроса.ТипЗапроса = "changeQuantity" 
			Или ПараметрыВходногоЗапроса.ТипЗапроса = "deleteProduct" 
			Или ПараметрыВходногоЗапроса.ТипЗапроса = "Login" 
			Или ПараметрыВходногоЗапроса.ТипЗапроса = "Register"
			Или ПараметрыВходногоЗапроса.ТипЗапроса = "printPass") Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаЛога = ?(Корзина <> Неопределено И ЗначениеЗаполнено(Корзина.Дата), Корзина.Дата, ТекущаяДата());
	ИмяЛога = "log" + "_" + ПараметрыВходногоЗапроса.ИДУстройства + "_" + Формат(ДатаЛога, "ДФ=ггггММдд") + "_" + Формат(ДатаЛога, "ДФ=ЧЧммсс");     
	
    ИмяЛога = ИмяЛога + ".txt";   
	
КонецПроцедуры	

Процедура ПолучитьИмяЛогаОтдельныеЗапросы(ИмяКаталога, ИмяЛога, ПараметрыВходногоЗапроса, Корзина, Чек) 
	
	Если	Не (ПараметрыВходногоЗапроса.ТипЗапроса = "openBatch" 
			Или ПараметрыВходногоЗапроса.ТипЗапроса = "closeBatch" 
			Или ПараметрыВходногоЗапроса.ТипЗапроса = "getPartnerGroups"
			Или ПараметрыВходногоЗапроса.ТипЗапроса = "deviceStatus") Тогда 
		Возврат;
	КонецЕсли;

	ДатаЛога = ТекущаяДата();
	ИмяЛога = "log" + "_" + ПараметрыВходногоЗапроса.ИДУстройства + "_" + Формат(ДатаЛога, "ДФ=ггггММдд") + "_" + Формат(ДатаЛога, "ДФ=ЧЧммсс"); 
	ИмяЛога = ИмяЛога + "_"	+ ПараметрыВходногоЗапроса.ТипЗапроса;  
	
	ИмяЛога = ИмяЛога + ".txt";   

КонецПроцедуры	 

Процедура ПолучитьИмяЛогаЗаписиЧека(ИмяКаталога, ИмяЛога, ПараметрыВходногоЗапроса, Корзина, Чек) 
	
	Если Не ПараметрыВходногоЗапроса.ТипЗапроса = "writeDocument" Тогда 
		Возврат;
	КонецЕсли;

	ДатаЛога = ?(Корзина <> Неопределено И ЗначениеЗаполнено(Корзина.Дата), Корзина.Дата, ТекущаяДата());
	ИмяЛога = "log" + "_" + ПараметрыВходногоЗапроса.ИДУстройства + "_" + Формат(ДатаЛога, "ДФ=ггггММдд") + "_" + Формат(ДатаЛога, "ДФ=ЧЧммсс");
	
	НовоеИмяЛога = ИмяЛога + ?(Чек <> Неопределено, "_" + Строка(Чек.Ссылка.УникальныйИдентификатор()) + "_" + Формат(Чек.СуммаДокумента, "ЧГ=; ЧДЦ=2; ЧРД=,") + "руб", "");	     
	Если ИмяЛога <> НовоеИмяЛога Тогда    
		Попытка
			ПереместитьФайл(ИмяКаталога + "\" + ИмяЛога + ".txt", ИмяКаталога + "\" + НовоеИмяЛога + ".txt"); 
		Исключение
		КонецПопытки;
		ИмяЛога = НовоеИмяЛога;			
	КонецЕсли;  
	
	ИмяЛога = ИмяЛога + ".txt";  	

КонецПроцедуры    

Процедура ПолучитьИмяЛогаОплаты(ИмяКаталога, ИмяЛога, ПараметрыВходногоЗапроса, Корзина, Чек) 
	
	Если Не ПараметрыВходногоЗапроса.ТипЗапроса = "AccessDocument" Тогда
		Возврат;
	КонецЕсли;
	
    МассивНайденныхФайлов = НайтиФайлы(
        ИмяКаталога + "\",
        "*" + Строка(Чек.Ссылка.УникальныйИдентификатор()) + "*.txt", 
        Ложь);    
		
	ТекДата = ТекущаяДата();
	ИмяЛога = ?(МассивНайденныхФайлов.Количество() > 0, МассивНайденныхФайлов[0].Имя,   
				"log" + "_" + ПараметрыВходногоЗапроса.ИДУстройства + "_" + Формат(ТекДата, "ДФ=ггггММдд") + "_" + Формат(ТекДата, "ДФ=ЧЧммсс") + ".txt"); 
	
КонецПроцедуры

#КонецОбласти   

